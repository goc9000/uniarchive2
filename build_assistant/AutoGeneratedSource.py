# build_assistant/AutoGeneratedSource.py
#
# (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
#
# This file is part of Uniarchive II.
#
# Licensed under the GPL-3

import re

from collections import namedtuple
from contextlib import contextmanager

from build_assistant.autogen_common import HASH_LINE_PREFIX, BEGIN_CUSTOM_SECTION_LINE_PREFIX, \
    END_CUSTOM_SECTION_LINE_PREFIX, compute_content_hash
from build_assistant.includes import IncludeType, UseType, normalize_include_path, normalize_use_path
from build_assistant.util.VirtualPath import VirtualPath


CodeGenConfig = namedtuple('CodeGenConfig', ['app_metadata', 'indent_size', 'gutter_width', 'base_namespace'])


class AutoGeneratedSource:
    virtual_path = None
    name = None
    type = None

    include_banks = None
    use_banks = None

    used_symbols = None
    manually_covered_symbols = None
    sources_covering_symbols = None

    code_lines = None
    indent_level = 0

    custom_sections = None

    companion = None

    core = None

    def __init__(self, virtual_path, name, type, autogen_core, companion=None):
        self.virtual_path = virtual_path
        self.name = name
        self.type = type

        self.core = autogen_core

        self.include_banks = {
            IncludeType.LOCAL: list(),
            IncludeType.STD: list(),
            IncludeType.QT: list(),
        }
        self.use_banks = {
            UseType.LOCAL: list(),
            UseType.STD: list(),
        }

        self.code_lines = list()

        self.used_symbols = set()
        self.manually_covered_symbols = set()
        self.sources_covering_symbols = list()
        self.custom_sections = set()

        self.companion = companion
        if companion is not None:
            self.sources_covering_symbols.append(companion)

        if type == 'cpp':
            self.include_banks[IncludeType.LOCAL].append(self.physical_path().replace_basename(name + '.h'))

    # Basics

    def line(self, line):
        self.code_lines.append((self._get_indent() + line).rstrip())
        return self

    def nl(self):
        return self.line('')

    # Comments

    def line_comment(self, comment):
        for line in comment.split("\n"):
            self.line('// ' + line)
        return self

    def doc_comment(self, comment):
        self.line('/**')
        for line in comment.split("\n"):
            self.line(' * ' + line)
        self.line(' */')

        return self

    # Indent

    def indent(self):
        self.indent_level += 1
        return self

    def unindent(self):
        self.indent_level -= 1
        return self

    def line_fits(self, line):
        return self.indent_level * self.core.codegen_cfg.indent_size + len(line) <= self.core.codegen_cfg.gutter_width

    def _get_indent(self):
        return ' ' * (self.indent_level * self.core.codegen_cfg.indent_size)

    # Toplevel blocks

    def enum_class_block(self, name):
        return self._generalized_block('enum class ' + name, semicolon=True)

    def struct_block(self, name, inherits=None):
        inherits = inherits or list()

        self.use_symbols(*inherits)

        return self._generalized_block('struct ' + name, inherits=inherits, semicolon=True)

    def public_block(self):
        return self._colon_block('public')

    def private_block(self):
        return self._colon_block('private')

    def protected_block(self):
        return self._colon_block('protected')

    @contextmanager
    def _generalized_block(
        self,
        head,
        params=None,
        param_separator=',',
        inherits=None,
        decorations=None,
        semicolon=False,
        nl_after=True
    ):
        """
        A generalized block looks like this:
        HEAD(param1, param2, param3)[decorations] : inherit1, inherit2, inherit3 {
        }

        or, alternatively, when items don't fit:

        HEAD(
          param1,
          param2
          param3
        )[decorations] : inherit1, inherit2,
                         inherit3 {
        }
        """

        self._generalized_head(
            head,
            params=params,
            param_separator=param_separator,
            inherits=inherits,
            decorations=decorations,
            closer=' {'
        ).indent()

        yield self

        self.unindent().line('}' + (';' if semicolon else ''))

        if nl_after:
            self.nl()

        return self

    def _generalized_head(
        self,
        head,
        params=None,
        param_separator=',',
        inherits=None,
        decorations=None,
        closer=';'
    ):
        if inherits is not None and len(inherits) == 0:
            inherits = None

        # First, try one-liner
        one_line = head
        if params is not None:
            one_line += '(' + (param_separator + ' ').join(params) + ')'
        one_line += decorations or ''
        without_inherits = one_line
        if inherits is not None:
            one_line += ' : ' + ', '.join(inherits)
        one_line += closer

        if self.line_fits(one_line):
            return self.line(one_line)

        if inherits is not None and self.line_fits(without_inherits):  # Then, try to break at the inherits
            self.line(without_inherits)
            inherits_base = ' '
        elif params is not None:  # Try to break at the params
            self.line(head + '(').indent()

            for index, param in enumerate(params):
                self.line(param + (param_separator if index < len(params) - 1 else ''))

            self.unindent()

            inherits_base = ')' + (decorations or '')

            if inherits is None:
                return self.line(inherits_base + closer)
        else:
            assert False, "Head too long: {0}".format(head)

        line = inherits_base + ' :'

        for index, item in enumerate(inherits):
            item_and_sep = item + (',' if index < len(inherits) - 1 else closer)
            try_line = line + ' ' + item_and_sep

            if not self.line_fits(try_line):
                self.line(line)
                line = ' ' * (len(inherits_base) + 3) + item_and_sep
            else:
                line = try_line

        self.line(line)

        return self

    @contextmanager
    def _colon_block(self, kind):
        self.unindent().line(kind + ':').indent()
        yield self

    # Statement blocks

    def if_block(self, *conditions, operator='&&', nl_after=True):
        return self._generalized_block('if ', params=conditions, param_separator=' '+operator, nl_after=nl_after)

    @contextmanager
    def else_block(self):  # Note: use within if block
        self.unindent().line('} else {').indent()
        yield self

    def for_each_block(self, type, value, range, nl_after=True):
        self.use_symbol(type)

        return self._generalized_block('for ', params=['{0} {1} : {2}'.format(type, value, range)], nl_after=nl_after)

    def switch_block(self, switch_by):
        return self._generalized_block('switch ', params=[switch_by])

    @contextmanager
    def case_block(self, case_label):
        self.line('case ' + case_label + ':').indent()
        yield self
        self.unindent()

    # Functions

    def declare_fn(self, function_name, return_type, *params, const=False, virtual=False, abstract=False):
        self.use_symbols(return_type, *(type for type, _ in params))

        return self._generalized_head(
            ('virtual ' if virtual else '') + return_type + ' ' + function_name,
            params=[type + ' ' + name for type, name in params],
            decorations=(' const' if const else '') + (' = 0' if abstract else '')
        )

    def declare_constructor(self, class_name, *params):
        self.use_symbols(*(type for type, _ in params))

        return self._generalized_head(class_name, params=[type + ' ' + name for type, name in params])

    def function(self, function_name, return_type, *params, declare=False):
        if declare:
            self.companion.declare_fn(function_name, return_type, *_adjust_params_for_declare(params))

        self.use_symbols(return_type, *(type for type, _ in params))

        return self._generalized_block(
            return_type + ' ' + function_name,
            params=[type + ' ' + name for type, name in params]
        )

    def method(self, class_name, function_name, return_type, *params, const=False, virtual=False, declare=False):
        if declare:
            self.companion.declare_fn(
                function_name, return_type, *_adjust_params_for_declare(params), const=const, virtual=virtual
            )

        self.use_symbols(return_type, *(type for type, _ in params))

        return self._generalized_block(
            return_type + ' ' + class_name + '::' + function_name,
            params=[type + ' ' + name for type, name in params],
            decorations=(' const' if const else '')
        )

    def constructor(self, class_name, *params, inherits=None, declare=False):
        if declare:
            self.companion.declare_constructor(class_name, *_adjust_params_for_declare(params))

        self.use_symbols(*(type for type, _ in params))

        return self._generalized_block(
            class_name + '::' + class_name,
            params=[type + ' ' + name for type, name in params],
            inherits=inherits
        )

    # Fields

    def field(self, type, name, default_value=None):
        self.use_symbol(type)

        return self.line('{0} {1}{2};'.format(type, name, ' = ' + default_value if default_value is not None else ''))

    # Calls
    def call(self, function, *values):
        return self._generalized_head(function, params=values)

    # Custom sections

    def custom_section(self, name):
        self.custom_sections.add(name)

        self.line(BEGIN_CUSTOM_SECTION_LINE_PREFIX + name)
        self.line(END_CUSTOM_SECTION_LINE_PREFIX + name)

        return self

    def get_custom_sections(self):
        return self.custom_sections.copy()

    # Includes

    def include(self, *items):
        return self.include_programmatic(IncludeType.LOCAL, *items)

    def std_include(self, *items):
        return self.include_programmatic(IncludeType.STD, *items)

    def qt_include(self, *items):
        return self.include_programmatic(IncludeType.QT, *items)

    def use(self, *items):
        return self.use_programmatic(UseType.LOCAL, *items)

    def std_use(self, *items):
        return self.use_programmatic(UseType.STD, *items)

    def include_programmatic(self, bank, *items):
        for path in map(normalize_include_path, items):
            if bank == IncludeType.LOCAL and path == self.physical_path():
                continue
            if path in self.include_banks[bank]:
                continue

            self.include_banks[bank].append(path)

        return self

    def use_programmatic(self, bank, *items):
        for path in map(normalize_use_path, items):
            if bank == UseType.LOCAL and path.is_equal_or_parent_of(VirtualPath(self.namespace_path())):
                continue
            if path in self.use_banks[bank]:
                continue

            self.use_banks[bank].append(path)

        return self

    # Symbols

    def use_symbol(self, symbol):
        for part in re.split(r'[^A-Za-z0-9_]+', symbol):
            if part != '':
                self.used_symbols.add(part)

        return self

    def use_symbols(self, *symbols):
        for symbol in symbols:
            self.use_symbol(symbol)

        return self

    def cover_symbols(self, symbols):
        self.manually_covered_symbols |= set(symbols)
        return self

    def cover_symbols_from(self, source):
        if not source in self.sources_covering_symbols:
            self.sources_covering_symbols.append(source)

        return self

    def get_covered_symbols(self):
        _, _, covered_symbols = self._includes_uses_and_covered_symbols()
        return covered_symbols

    def _effective_includes_and_uses(self):
        includes, uses, _ = self._includes_uses_and_covered_symbols()
        return includes, uses

    def _symbols_covered_by_includes(self, includes):
        covered_symbols = set()

        for bank, items in includes.items():
            for item in items:
                covered_symbols |= set(self.core.symbol_registry.symbols_covered_by_include(bank, item))

        return covered_symbols

    def _includes_uses_and_covered_symbols(self):
        covered_symbols = self.manually_covered_symbols | self._symbols_covered_by_includes(self.include_banks)
        for source in self.sources_covering_symbols:
            covered_symbols |= source.get_covered_symbols()

        includes = {bank: items.copy() for bank, items in self.include_banks.items()}
        uses = {bank: items.copy() for bank, items in self.use_banks.items()}

        for first_pass in [True, False]:
            for symbol in self.used_symbols:
                if symbol in covered_symbols:
                    continue

                symbol_info = self.core.symbol_registry.lookup(symbol)

                if symbol_info.include is not None:
                    bank, path = symbol_info.include

                    if first_pass and bank != IncludeType.LOCAL:
                        # We try to cover as much as possible with local includes only, in the first pass
                        continue

                    if not ((path in includes[bank]) or (bank == IncludeType.LOCAL and path == self.physical_path())):
                        includes[bank].append(path)

                if symbol_info.use is not None:
                    bank, path = symbol_info.use
                    if not (
                        (path in uses[bank]) or
                        (bank == UseType.LOCAL and path.is_equal_or_parent_of(VirtualPath(self.namespace_path())))
                    ):
                        uses[bank].append(path)

            covered_symbols |= self._symbols_covered_by_includes(includes)

        return includes, uses, covered_symbols

    # Misc info

    def physical_path(self):
        return VirtualPath(item.strip('()') for item in self.virtual_path.elements).add(self.name + '.' + self.type)

    def namespace_path(self):
        return [self.core.codegen_cfg.base_namespace] + [x for x in self.virtual_path.elements if not x.startswith('(')]

    # Generation

    def generated_content(self, custom_sections=None):
        return "\n".join(self._gen_lines(custom_sections=custom_sections)) + "\n"

    def _gen_header_lines(self):
        def gen_lines_real():
            yield self.physical_path().to_text()
            yield ''

            if len(self.custom_sections) > 0:
                yield 'WARNING: This file is partially autogenerated. ' + \
                      'Edit only the custom sections, or autogen_config.yml and re-generate.'
            else:
                yield 'WARNING: This file is autogenerated. ' + \
                      'To make changes, edit autogen_config.yml instead and re-generate.'
            yield HASH_LINE_PREFIX[3:]
            yield ''

            yield self.core.codegen_cfg.app_metadata.copyright_text
            yield ''
            yield 'This file is part of {0}.'.format(self.core.codegen_cfg.app_metadata.app_name)
            yield ''
            yield self.core.codegen_cfg.app_metadata.license_text

        yield '/**'
        for line in gen_lines_real():
            yield ' * ' + line if line != '' else ' *'
        yield ' */'

    def _gen_includes_lines(self, includes):
        for bank in [IncludeType.LOCAL, IncludeType.QT, IncludeType.STD]:
            if len(includes[bank]) == 0:
                continue

            sort_law = self._local_includes_sort_law if bank == IncludeType.LOCAL else lambda path: path.to_text()

            for item in sorted(includes[bank], key=sort_law):
                yield ('#include ' + ('"{0}"' if bank == IncludeType.LOCAL else '<{0}>')).format(item)

            yield ''

    def _local_includes_sort_law(self, path):
        if path == self.physical_path():
            return 0,  # corresponding header file always comes first
        else:
            return (1,) + tuple((0, item) for item in path.elements[:-1]) + ((1, path.elements[-1]),)

    def _gen_uses_lines(self, uses):
        for bank in [UseType.STD, UseType.LOCAL]:
            for item in sorted(uses[bank], key=lambda path: path.to_text()):
                yield 'using namespace {0};'.format('::'.join(item.elements))

        yield ''

    def _gen_namespaced_lines(self, uses):
        for line in self._gen_uses_lines(uses):
            yield line

        for line in self.code_lines:
            yield line

    def _gen_guarded_lines(self):
        includes, uses = self._effective_includes_and_uses()

        for line in self._gen_includes_lines(includes):
            yield line

        yield ''
        namespace_decls = ['namespace {0} {{'.format(namespace) for namespace in self.namespace_path()]
        yield ' '.join(namespace_decls)
        yield ''

        for line in self._gen_namespaced_lines(uses):
            yield line

        yield ''
        yield '}' * len(namespace_decls)

    def _gen_guards(self, guarded_lines):
        guard_name = '_'.join(self.namespace_path() + [self.name, 'h']).upper()

        yield '#ifndef ' + guard_name
        yield '#define ' + guard_name
        yield ''

        for line in guarded_lines:
            yield line

        yield ''
        yield '#endif //' + guard_name

    def _gen_body_lines(self):
        guarded_lines = self._gen_guarded_lines()

        for line in self._gen_guards(guarded_lines) if self.type == 'h' else guarded_lines:
            yield line

    def _gen_unfiltered_lines(self):
        for line in self._gen_header_lines():
            yield line

        yield ''

        for line in self._gen_body_lines():
            yield line

    def _gen_lines_without_hash(self):
        for line in filter_empty_lines(self._gen_unfiltered_lines()):
            yield line

    def _gen_lines(self, custom_sections=None):
        custom_sections = custom_sections or dict()
        content_hash = compute_content_hash(self._gen_lines_without_hash())

        for line in self._gen_lines_without_hash():
            if line.startswith(HASH_LINE_PREFIX):
                yield line + ' ' + content_hash
            elif line.strip().startswith(BEGIN_CUSTOM_SECTION_LINE_PREFIX):
                section_name = line.strip()[len(BEGIN_CUSTOM_SECTION_LINE_PREFIX):]
                yield line
                if section_name in custom_sections:
                    for section_line in custom_sections[section_name]:
                        yield section_line
            else:
                yield line


def filter_empty_lines(lines):
    """Collapses multiple empty lines into one, and filters out trailing empty lines"""
    has_empty_line = False
    for line in lines:
        if line != '':
            if has_empty_line:
                yield ''
                has_empty_line = False
            yield line
        else:
            has_empty_line = True


def _adjust_params_for_declare(params):
    return [(re.sub(r'\s+UNUSED\s*$', '', type), name) for type, name in params]

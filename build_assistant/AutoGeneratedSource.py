# build_assistant/AutoGeneratedSource.py
#
# (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
#
# This file is part of Uniarchive II.
#
# Licensed under the GPL-3

import json
import os

from collections import namedtuple
from contextlib import contextmanager


CodeGenConfig = namedtuple('CodeGenConfig', ['app_metadata', 'indent_size', 'gutter_width', 'base_namespace'])


class AutoGeneratedSource:
    path = None
    name = None
    type = None

    includes = None
    qt_includes = None
    std_includes = None

    code_lines = None
    indent_level = 0

    codegen_cfg = None

    def __init__(self, parent_path, name, type, codegen_cfg):
        self.path = parent_path
        self.name = name
        self.type = type

        self.codegen_cfg = codegen_cfg

        self.includes = list()
        self.qt_includes = list()
        self.std_includes = list()

        self.code_lines = list()

        if type == 'cpp':
            self.includes.append(parent_path.add(name + '.h').to_text())

    def include(self, *items):
        self.includes.extend(items)
        return self

    def qt_include(self, *items):
        self.qt_includes.extend(items)
        return self

    def std_include(self, *items):
        self.std_includes.extend(items)
        return self

    def line(self, line):
        self.code_lines.append((self.get_indent() + line).rstrip())
        return self

    def nl(self):
        return self.line('')

    def line_comment(self, comment):
        for line in comment.split("\n"):
            self.line('// ' + line)
        return self

    def indent(self):
        self.indent_level += 1
        return self

    def unindent(self):
        self.indent_level -= 1
        return self

    def declare_fn(self, function_name, return_type, *param_types):
        # TODO: add mechanics for splitting over several lines if params are too long
        self.line(return_type + ' ' + function_name + '(' + ', '.join(param_types) + ');')
        return self

    @contextmanager
    def block(self, head, semicolon=False, nl_after=True):
        self.line(head + ' {').indent()
        yield self
        self.unindent().line('};' if semicolon else '}')
        if nl_after:
            self.nl()

    def enum_class_block(self, name):
        return self.block('enum class ' + name, semicolon=True)

    def switch_block(self, switch_by):
        return self.block('switch (' + switch_by + ')')

    @contextmanager
    def case_block(self, case_label):
        self.line('case ' + case_label + ':').indent()
        yield self
        self.unindent()

    def function(self, function_name, return_type, *param_types):
        # TODO: add mechanics for splitting over several lines if params are too long
        return self.block(return_type + ' ' + function_name + '(' + ', '.join(param_types) + ')')

    def string_literal(self, text):
        return json.dumps(text)  # Eh, probably works ok in most situations

    def get_indent(self):
        return ' ' * (self.indent_level * self.codegen_cfg.indent_size)

    def gen_header_lines(self):
        def gen_lines_real():
            yield self.path.add(self.name + '.' + self.type).to_text()
            yield ''

            yield 'WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.'
            yield ''

            yield self.codegen_cfg.app_metadata.copyright_text
            yield ''
            yield 'This file is part of {0}.'.format(self.codegen_cfg.app_metadata.app_name)
            yield ''
            yield self.codegen_cfg.app_metadata.license_text

        yield '/**'
        for line in gen_lines_real():
            yield ' * ' + line if line != '' else ' *'
        yield ' */'

    def gen_includes_lines(self):
        for include_group in [self.includes, self.qt_includes, self.std_includes]:
            for item in include_group:
                yield ('#include ' + ('"{0}"' if include_group == self.includes else '<{0}>')).format(item)

            yield ''

    def gen_namespaced_lines(self):
        for line in self.code_lines:
            yield line

    def namespace_path(self):
        return [self.codegen_cfg.base_namespace] + self.path.elements

    def gen_guarded_lines(self):
        for line in self.gen_includes_lines():
            yield line

        yield ''
        namespace_decls = ['namespace {0} {{'.format(namespace) for namespace in self.namespace_path()]
        yield ' '.join(namespace_decls)
        yield ''

        for line in self.gen_namespaced_lines():
            yield line

        yield ''
        yield '}' * len(namespace_decls)

    def gen_guards(self, guarded_lines):
        guard_name = '_'.join(self.namespace_path() + [self.name, 'h']).upper()

        yield '#ifndef ' + guard_name
        yield '#define ' + guard_name
        yield ''

        for line in guarded_lines:
            yield line

        yield ''
        yield '#endif //' + guard_name

    def gen_body_lines(self):
        guarded_lines = self.gen_guarded_lines()

        for line in self.gen_guards(guarded_lines) if self.type == 'h' else guarded_lines:
            yield line

    def gen_unfiltered_lines(self):
        for line in self.gen_header_lines():
            yield line

        yield ''

        for line in self.gen_body_lines():
            yield line

    def gen_lines(self):
        for line in filter_empty_lines(self.gen_unfiltered_lines()):
            yield line

    def commit(self, base_src_path):
        os.makedirs(base_src_path.append(self.path).realize(), exist_ok=True)

        # TODO: read file if exists and check that it is autogenerable, checksum ok etc.

        with open(base_src_path.append(self.path).add(self.name + '.' + self.type).realize(), 'wt') as f:
            f.writelines(line + "\n" for line in self.gen_lines())


def filter_empty_lines(lines):
    """Collapses multiple empty lines into one, and filters out trailing empty lines"""
    has_empty_line = False
    for line in lines:
        if line != '':
            if has_empty_line:
                yield ''
                has_empty_line = False
            yield line
        else:
            has_empty_line = True

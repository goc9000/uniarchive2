# build_assistant/AutoGenCore.py
#
# (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
#
# This file is part of Uniarchive II.
#
# Licensed under the GPL-3


import hashlib
import os

from build_assistant.AutoGeneratedSource import AutoGeneratedSource
from build_assistant.autogen_common import HASH_LINE_PREFIX
from build_assistant.util import fail


class AutoGenCore:
    autogen_config = None
    symbol_registry = None
    codegen_cfg = None

    sources = None

    def __init__(self, autogen_config, symbol_registry, code_gen_config):
        self.autogen_config = autogen_config
        self.symbol_registry = symbol_registry
        self.codegen_cfg = code_gen_config

        self.sources = dict()

    def new_h(self, base_path, name):
        return self._new(base_path, name, 'h')

    def new_cpp(self, base_path, name):
        return self._new(base_path, name, 'cpp')

    def new_pair(self, base_path, name):
        return (
            self.new_cpp(base_path, name),
            self.new_h(base_path, name)
        )

    def _new(self, base_path, name, type):
        full_path = base_path.add(name + '.' + type)

        assert full_path not in self.sources, 'Duplicate source {0}'.format(full_path.to_text())

        source = AutoGeneratedSource(base_path, name, type, self)
        self.sources[full_path] = source

        return source

    def commit(self, base_src_dir):
        for source in self.sources.values():
            real_path = base_src_dir.append(source.physical_path()).realize()

            os.makedirs(base_src_dir.append(source.physical_path().parent()).realize(), exist_ok=True)

            if os.path.isfile(real_path):
                check_existing_generated_file(real_path)

            with open(real_path, 'wt') as f:
                f.write(source.generated_content())


def check_existing_generated_file(real_path):
    declared_hash = None
    hasher = hashlib.sha256()

    with open(real_path, 'rt') as f:
        for line in f.readlines():
            if line.endswith("\n"):
                line = line[:-1]

            if line.startswith(HASH_LINE_PREFIX):
                declared_hash = line[len(HASH_LINE_PREFIX)+1:]
            else:
                hasher.update(line.encode('ascii'))

    if declared_hash is None:
        fail(
            """
            No line specifying the content hash found for {0}. It might not be an autogenerated file!
            Please double-check the autogeneration config. Aborting so as not to accidentally overwrite manual files.
            """,
            real_path
        )

    actual_hash = hasher.hexdigest()

    if actual_hash != declared_hash:
        fail(
            """
            Content hash is incorrect for {0}. The file has been modified manually.
            Please save any manual changes so they can be applied elsewhere, and delete the file so it can be regenerated.
            """,
            real_path
        )

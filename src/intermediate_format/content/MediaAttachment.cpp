/**
 * intermediate_format/content/MediaAttachment.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): aaa33e48f5aef5dac61b1725d727280715ce4985bb4f9d561692767895c553c9
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/content/MediaAttachment.h"
#include "utils/qt/debug_extras.h"
#include "utils/serialization/deserialization_helpers.h"
#include "utils/serialization/serialization_helpers.h"

namespace uniarchive2 { namespace intermediate_format { namespace content {

using namespace uniarchive2::utils::serialization;

MediaAttachment::MediaAttachment() : RawMessageContentItem() {
}

RawMessageContentItemSubType MediaAttachment::subType() const {
    return RawMessageContentItemSubType::MEDIA_ATTACHMENT;
}

CEDE(MediaAttachment) MediaAttachment::deserializeFromStream(QDataStream& mut_stream, bool skip_type) {
    invariant_violation("MediaAttachment deserialization not yet implemented");
}

void MediaAttachment::serializeToStreamImpl(QDataStream& mut_stream) const {
    mut_stream << filename << error;
}

void MediaAttachment::writeToDebugStreamImpl(QDebug stream) const {
    stream << "[Media";
    if (filename) {
        stream << " filename=" << filename;
    }
    if (error) {
        stream << " error=" << error;
    }
    stream << "]";
}

}}}

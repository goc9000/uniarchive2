/**
 * intermediate_format/content/symbols/FlagIcon.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): 97338fc9d7bf02002b2e3833ead97f6524f6c2464330e2cd846f0ee8a643f3bf
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/content/symbols/FlagIcon.h"
#include "utils/serialization/deserialization_helpers.h"

namespace uniarchive2 { namespace intermediate_format { namespace content {

using namespace uniarchive2::utils::serialization;

FlagIcon::FlagIcon(IMM(QString) country_code, IMM(QString) text_equivalent)
  : RawMessageContentItem(), countryCode(country_code), textEquivalent(text_equivalent) {
}

RawMessageContentItemSubType FlagIcon::subType() const {
    return RawMessageContentItemSubType::FLAG_ICON;
}

CEDE(FlagIcon) FlagIcon::deserializeFromStream(QDataStream& mut_stream, bool skip_type) {
    invariant_violation("FlagIcon deserialization not yet implemented");
}

void FlagIcon::serializeToStreamImpl(QDataStream& mut_stream) const {
    mut_stream << countryCode << textEquivalent;
}

void FlagIcon::writeToDebugStreamImpl(QDebug stream) const {
    stream << "[FlagIcon";
    stream << " country_code=" << countryCode << " text_equivalent=" << textEquivalent;
    stream << "]";
}

}}}

/**
 * intermediate_format/content/symbols/FlagIcon.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): 89ea59e27d1d1f147ad2acf99980213331afa7640988a1647d7eaf4950cb6e31
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/content/symbols/FlagIcon.h"
#include "utils/serialization/deserialization_helpers.h"

namespace uniarchive2 { namespace intermediate_format { namespace content {

using namespace uniarchive2::utils::serialization;

FlagIcon::FlagIcon(IMM(QString) country_code, IMM(QString) text_equivalent)
  : RawMessageContentItem(), countryCode(country_code), textEquivalent(text_equivalent) {
    // Nothing else to initialize
}

RawMessageContentItemSubType FlagIcon::subType() const {
    return RawMessageContentItemSubType::FLAG_ICON;
}

bool FlagIcon::visitSubjectsImpl(IMM(visit_subjects_callback_t) UNUSED callback) {
    // No fields to visit
    return true;
}

CEDE(FlagIcon) FlagIcon::deserializeFromStream(QDataStream& mut_stream, bool skip_type) {
    maybeDeserializeType(skip_type, mut_stream, RawMessageContentItemSubType::FLAG_ICON);

    QString country_code = must_deserialize(mut_stream, QString);
    QString text_equivalent = must_deserialize(mut_stream, QString);

    unique_ptr<FlagIcon> item = make_unique<FlagIcon>(country_code, text_equivalent);

    return item;
}

void FlagIcon::serializeToStreamImpl(QDataStream& mut_stream) const {
    mut_stream << countryCode << textEquivalent;
}

void FlagIcon::writeToDebugStreamImpl(QDebug stream) const {
    stream << "[FlagIcon";
    stream << " country_code=" << countryCode << " text_equivalent=" << textEquivalent;
    stream << "]";
}

}}}

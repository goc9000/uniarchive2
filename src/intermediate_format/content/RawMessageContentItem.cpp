/**
 * intermediate_format/content/RawMessageContentItem.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): a2fa9fcc34ba1792d2da1782f9a3d58233b0c241db9e22802a4dfce43f232817
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/content/RawMessageContentItem.h"
#include "intermediate_format/content/formatting/ANSIColorTag.h"
#include "intermediate_format/content/formatting/ANSIResetTag.h"
#include "intermediate_format/content/formatting/BoldTag.h"
#include "intermediate_format/content/formatting/CSSStyleTag.h"
#include "intermediate_format/content/formatting/EmphasisTag.h"
#include "intermediate_format/content/formatting/FontTag.h"
#include "intermediate_format/content/formatting/ItalicTag.h"
#include "intermediate_format/content/formatting/LinkTag.h"
#include "intermediate_format/content/formatting/RGBColorTag.h"
#include "intermediate_format/content/formatting/UnderlineTag.h"
#include "intermediate_format/content/formatting/YahooAltTag.h"
#include "intermediate_format/content/formatting/YahooFadeTag.h"
#include "intermediate_format/content/symbols/FlagIcon.h"
#include "intermediate_format/content/symbols/SkypeEmoticon.h"
#include "intermediate_format/content/LineBreak.h"
#include "intermediate_format/content/MediaAttachment.h"
#include "intermediate_format/content/SkypeQuote.h"
#include "intermediate_format/content/TextSection.h"
#include "utils/serialization/deserialization_helpers.h"

#include <QDebugStateSaver>

namespace uniarchive2 { namespace intermediate_format { namespace content {

using namespace uniarchive2::utils::serialization;

RawMessageContentItem::RawMessageContentItem() : StandardPolymorphic() {
    // Nothing else to initialize
}

bool RawMessageContentItem::visitSubjects(IMM(visit_subjects_callback_t) callback) {
    return visitSubjectsImpl(callback);
}

CEDE(RawMessageContentItem) RawMessageContentItem::deserializeFromStream(QDataStream& mut_stream) {
    RawMessageContentItemSubType subtype = must_deserialize(mut_stream, RawMessageContentItemSubType);

    switch (subtype) {
        case RawMessageContentItemSubType::ANSI_COLOR_TAG:
            return ANSIColorTag::deserializeFromStream(mut_stream, true);
        case RawMessageContentItemSubType::ANSI_RESET_TAG:
            return ANSIResetTag::deserializeFromStream(mut_stream, true);
        case RawMessageContentItemSubType::BOLD_TAG:
            return BoldTag::deserializeFromStream(mut_stream, true);
        case RawMessageContentItemSubType::CSS_STYLE_TAG:
            return CSSStyleTag::deserializeFromStream(mut_stream, true);
        case RawMessageContentItemSubType::EMPHASIS_TAG:
            return EmphasisTag::deserializeFromStream(mut_stream, true);
        case RawMessageContentItemSubType::FONT_TAG:
            return FontTag::deserializeFromStream(mut_stream, true);
        case RawMessageContentItemSubType::ITALIC_TAG:
            return ItalicTag::deserializeFromStream(mut_stream, true);
        case RawMessageContentItemSubType::LINK_TAG:
            return LinkTag::deserializeFromStream(mut_stream, true);
        case RawMessageContentItemSubType::RGB_COLOR_TAG:
            return RGBColorTag::deserializeFromStream(mut_stream, true);
        case RawMessageContentItemSubType::UNDERLINE_TAG:
            return UnderlineTag::deserializeFromStream(mut_stream, true);
        case RawMessageContentItemSubType::YAHOO_ALT_TAG:
            return YahooAltTag::deserializeFromStream(mut_stream, true);
        case RawMessageContentItemSubType::YAHOO_FADE_TAG:
            return YahooFadeTag::deserializeFromStream(mut_stream, true);
        case RawMessageContentItemSubType::FLAG_ICON:
            return FlagIcon::deserializeFromStream(mut_stream, true);
        case RawMessageContentItemSubType::SKYPE_EMOTICON:
            return SkypeEmoticon::deserializeFromStream(mut_stream, true);
        case RawMessageContentItemSubType::LINE_BREAK:
            return LineBreak::deserializeFromStream(mut_stream, true);
        case RawMessageContentItemSubType::MEDIA_ATTACHMENT:
            return MediaAttachment::deserializeFromStream(mut_stream, true);
        case RawMessageContentItemSubType::SKYPE_QUOTE:
            return SkypeQuote::deserializeFromStream(mut_stream, true);
        case RawMessageContentItemSubType::TEXT_SECTION:
            return TextSection::deserializeFromStream(mut_stream, true);
    }

    invariant_violation("Invalid deserialized RawMessageContentItem subtype (code: %d)", (int)subtype);
}

void RawMessageContentItem::writeToDebugStream(QDebug stream) const {
    QDebugStateSaver saver(stream);
    stream.nospace();

    writeToDebugStreamImpl(stream);
}

}}}

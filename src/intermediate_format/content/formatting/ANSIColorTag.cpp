/**
 * intermediate_format/content/formatting/ANSIColorTag.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): a481765385d7189ccb8969b51d2e3e5475fee9f3555da6b57a154f816bb5a0da
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/content/formatting/ANSIColorTag.h"
#include "utils/serialization/deserialization_helpers.h"

namespace uniarchive2 { namespace intermediate_format { namespace content {

using namespace uniarchive2::utils::serialization;

ANSIColorTag::ANSIColorTag(bool open, ANSIColor color) : SymmetricTag(open), color(color) {
}

RawMessageContentItemSubType ANSIColorTag::subType() const {
    return RawMessageContentItemSubType::ANSI_COLOR_TAG;
}

QString ANSIColorTag::tagName() const {
    return "ANSICol";
}

CEDE(ANSIColorTag) ANSIColorTag::deserializeFromStream(QDataStream& mut_stream, bool skip_type) {
    invariant_violation("ANSIColorTag deserialization not yet implemented");
}

void ANSIColorTag::serializeAttributesToStream(QDataStream& mut_stream) const {
    mut_stream << color;
}

void ANSIColorTag::writeAttributesToDebugStream(QDebug stream) const {
    stream << " " << color;
}

}}}

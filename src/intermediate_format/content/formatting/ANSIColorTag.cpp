/**
 * intermediate_format/content/formatting/ANSIColorTag.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): 9e5a62b1635b39d43cc366d26dd3a8ed85933d56d019ac0536dc2777ea01be3b
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/content/formatting/ANSIColorTag.h"
#include "utils/serialization/deserialization_helpers.h"

namespace uniarchive2 { namespace intermediate_format { namespace content {

using namespace uniarchive2::utils::serialization;

ANSIColorTag::ANSIColorTag(bool open, ANSIColor color) : SymmetricTag(open), color(color) {
    // Nothing else to initialize
}

RawMessageContentItemSubType ANSIColorTag::subType() const {
    return RawMessageContentItemSubType::ANSI_COLOR_TAG;
}

QString ANSIColorTag::tagName() const {
    return "ANSICol";
}

CEDE(ANSIColorTag) ANSIColorTag::deserializeFromStream(QDataStream& mut_stream, bool skip_type) {
    maybeDeserializeType(skip_type, mut_stream, RawMessageContentItemSubType::ANSI_COLOR_TAG);

    bool open = must_deserialize(mut_stream, bool);
    ANSIColor color = must_deserialize(mut_stream, ANSIColor);

    unique_ptr<ANSIColorTag> item = make_unique<ANSIColorTag>(open, color);

    return item;
}

void ANSIColorTag::serializeAttributesToStream(QDataStream& mut_stream) const {
    mut_stream << color;
}

void ANSIColorTag::writeAttributesToDebugStream(QDebug stream) const {
    stream << " " << color;
}

}}}

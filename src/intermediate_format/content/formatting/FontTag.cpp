/**
 * intermediate_format/content/formatting/FontTag.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): ab4bbd7bf8cc6e1b730cd836eeab69a8915158a05752e247fb5aa02344f0c4ed
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/content/formatting/FontTag.h"
#include "utils/qt/debug_extras.h"
#include "utils/serialization/deserialization_helpers.h"
#include "utils/serialization/serialization_helpers.h"

namespace uniarchive2 { namespace intermediate_format { namespace content {

using namespace uniarchive2::utils::serialization;

FontTag::FontTag(bool open) : StandardTag(open) {
    // Nothing else to initialize
}

RawMessageContentItemSubType FontTag::subType() const {
    return RawMessageContentItemSubType::FONT_TAG;
}

QString FontTag::tagName() const {
    return "Font";
}

bool FontTag::visitSubjectsImpl(IMM(visit_subjects_callback_t) UNUSED callback) {
    // No fields to visit
    return true;
}

CEDE(FontTag) FontTag::deserializeFromStream(QDataStream& mut_stream, bool skip_type) {
    maybeDeserializeType(skip_type, mut_stream, RawMessageContentItemSubType::FONT_TAG);

    if (!must_deserialize(mut_stream, bool)) {
        return make_unique<FontTag>(false);
    }

    optional<vector<QString>> faces = must_deserialize(mut_stream, optional<vector<QString>>);
    optional<QString> size = must_deserialize(mut_stream, optional<QString>);
    optional<Color> color = must_deserialize(mut_stream, optional<Color>);
    optional<QString> css = must_deserialize(mut_stream, optional<QString>);

    unique_ptr<FontTag> item = make_unique<FontTag>(true);
    item->faces = faces;
    item->size = size;
    item->color = color;
    item->css = css;

    return item;
}

void FontTag::serializeOpenTagAttributesToStream(QDataStream& mut_stream) const {
    mut_stream << faces << size << color << css;
}

void FontTag::writeOpenTagAttributesToDebugStream(QDebug stream) const {
    if (faces) {
        if (faces->size() == 1) {
            stream << " face=" << faces->front();
        } else {
            stream << " faces=" << faces;
        }
    }
    if (size) {
        stream << " size=" << size;
    }
    if (color) {
        stream << " color=" << color;
    }
    if (css) {
        stream << " css=" << css;
    }
}

}}}

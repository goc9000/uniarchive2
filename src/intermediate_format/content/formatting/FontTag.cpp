/**
 * intermediate_format/content/formatting/FontTag.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): c46287c213037eebbee6631fefd17ad7643e1266776af2ea83f8df6d90c3b851
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/content/formatting/FontTag.h"
#include "utils/qt/debug_extras.h"
#include "utils/serialization/serialization_helpers.h"

namespace uniarchive2 { namespace intermediate_format { namespace content {

FontTag::FontTag(bool open) : StandardTag(open) {
}

RawMessageContentItemSubType FontTag::subType() const {
    return RawMessageContentItemSubType::FONT_TAG;
}

QString FontTag::tagName() const {
    return "Font";
}

void FontTag::serializeOpenTagAttributesToStream(QDataStream& mut_stream) const {
    mut_stream << faces << size << color << css;
}

void FontTag::writeOpenTagAttributesToDebugStream(QDebug stream) const {
    if (faces) {
        if (faces->size() == 1) {
            stream << " face=" << faces->front();
        } else {
            stream << " faces=" << faces;
        }
    }
    if (size) {
        stream << " size=" << size;
    }
    if (color) {
        stream << " color=" << color;
    }
    if (css) {
        stream << " css=" << css;
    }
}

}}}

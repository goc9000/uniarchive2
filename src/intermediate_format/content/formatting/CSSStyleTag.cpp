/**
 * intermediate_format/content/formatting/CSSStyleTag.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): 44d0117573e17d4c215e257dbbda5e30fe23c0af37508c2185c3c5814f29d09b
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/content/formatting/CSSStyleTag.h"
#include "utils/qt/debug_extras.h"
#include "utils/serialization/deserialization_helpers.h"
#include "utils/serialization/serialization_helpers.h"

namespace uniarchive2 { namespace intermediate_format { namespace content {

using namespace uniarchive2::utils::serialization;

CSSStyleTag::CSSStyleTag(IMM(QString) css) : StandardTag(true), css(css) {
    // Nothing else to initialize
}

CSSStyleTag::CSSStyleTag() : StandardTag(false) {
    // Nothing else to initialize
}

RawMessageContentItemSubType CSSStyleTag::subType() const {
    return RawMessageContentItemSubType::CSS_STYLE_TAG;
}

QString CSSStyleTag::tagName() const {
    return "Style";
}

bool CSSStyleTag::visitSubjectsImpl(IApparentSubjectVisitor& UNUSED visitor) {
    // No fields to visit
    return true;
}

CEDE(CSSStyleTag) CSSStyleTag::deserializeFromStream(QDataStream& mut_stream, bool skip_type) {
    maybeDeserializeType(skip_type, mut_stream, RawMessageContentItemSubType::CSS_STYLE_TAG);

    if (!must_deserialize(mut_stream, bool)) {
        return make_unique<CSSStyleTag>();
    }

    QString css = must_deserialize(mut_stream, QString);

    unique_ptr<CSSStyleTag> item = make_unique<CSSStyleTag>(css);

    return item;
}

void CSSStyleTag::serializeOpenTagAttributesToStream(QDataStream& mut_stream) const {
    mut_stream << *css;
}

void CSSStyleTag::writeOpenTagAttributesToDebugStream(QDebug stream) const {
    stream << " " << css;
}

}}}

/**
 * intermediate_format/content/formatting/CSSStyleTag.h
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): 4215aa3c62ba9547869b34d6f2abbe221f0987c9b42881c8a152492c48657946
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#ifndef UNIARCHIVE2_INTERMEDIATE_FORMAT_CONTENT_CSSSTYLETAG_H
#define UNIARCHIVE2_INTERMEDIATE_FORMAT_CONTENT_CSSSTYLETAG_H

#include "intermediate_format/content/StandardTag.h"
#include "utils/external_libs/optional.hpp"
#include "utils/language/shortcuts.h"

#include <QDataStream>

namespace uniarchive2 { namespace intermediate_format { namespace content {

using namespace std::experimental;

struct CSSStyleTag : StandardTag {
public:
    optional<QString> css;

    CSSStyleTag(IMM(QString) css);
    CSSStyleTag();

    virtual RawMessageContentItemSubType subType() const;

    virtual QString tagName() const;

    static CEDE(CSSStyleTag) deserializeFromStream(QDataStream& mut_stream, bool skip_type=false);

protected:
    virtual void serializeOpenTagAttributesToStream(QDataStream& mut_stream) const;

    virtual void writeOpenTagAttributesToDebugStream(QDebug stream) const;
};

}}}

#endif //UNIARCHIVE2_INTERMEDIATE_FORMAT_CONTENT_CSSSTYLETAG_H

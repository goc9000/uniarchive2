/**
 * intermediate_format/content/RawMessageContentItemSubType.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): 5b1af3452030d3c0d5d75df70238f9cbf902f4c6a85fb2cb4a0f7c8db3017198
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/content/RawMessageContentItemSubType.h"
#include "utils/qt/shortcuts.h"
#include "utils/serialization/deserialization_helpers.h"

#include <QtDebug>

namespace uniarchive2 { namespace intermediate_format { namespace content {

using namespace uniarchive2::utils::serialization;

QString name_for_raw_message_content_item_sub_type(RawMessageContentItemSubType type) {
    switch (type) {
        case RawMessageContentItemSubType::ANSI_COLOR_TAG:
            return "ANSIColorTag";
        case RawMessageContentItemSubType::ANSI_RESET_TAG:
            return "ANSIResetTag";
        case RawMessageContentItemSubType::BOLD_TAG:
            return "BoldTag";
        case RawMessageContentItemSubType::CSS_STYLE_TAG:
            return "CSSStyleTag";
        case RawMessageContentItemSubType::EMPHASIS_TAG:
            return "EmphasisTag";
        case RawMessageContentItemSubType::FONT_TAG:
            return "FontTag";
        case RawMessageContentItemSubType::ITALIC_TAG:
            return "ItalicTag";
        case RawMessageContentItemSubType::LINK_TAG:
            return "LinkTag";
        case RawMessageContentItemSubType::RGB_COLOR_TAG:
            return "RGBColorTag";
        case RawMessageContentItemSubType::UNDERLINE_TAG:
            return "UnderlineTag";
        case RawMessageContentItemSubType::YAHOO_ALT_TAG:
            return "YahooAltTag";
        case RawMessageContentItemSubType::YAHOO_FADE_TAG:
            return "YahooFadeTag";
        case RawMessageContentItemSubType::FLAG_ICON:
            return "FlagIcon";
        case RawMessageContentItemSubType::SKYPE_EMOTICON:
            return "SkypeEmoticon";
        case RawMessageContentItemSubType::LINE_BREAK:
            return "LineBreak";
        case RawMessageContentItemSubType::MEDIA_ATTACHMENT:
            return "MediaAttachment";
        case RawMessageContentItemSubType::SKYPE_QUOTE:
            return "SkypeQuote";
        case RawMessageContentItemSubType::TEXT_SECTION:
            return "TextSection";
    }

    invariant_violation("Invalid RawMessageContentItemSubType value (%lld)", (int64_t)type);
}

QDebug operator<< (QDebug stream, RawMessageContentItemSubType type) {
    stream << QP(name_for_raw_message_content_item_sub_type(type));

    return stream;
}

QDataStream& operator>> (QDataStream& mut_stream, RawMessageContentItemSubType& mut_type) {
    uint8_t code = must_deserialize(mut_stream, uint8_t);

    switch ((RawMessageContentItemSubType)code) {
        case RawMessageContentItemSubType::ANSI_COLOR_TAG:
        case RawMessageContentItemSubType::ANSI_RESET_TAG:
        case RawMessageContentItemSubType::BOLD_TAG:
        case RawMessageContentItemSubType::CSS_STYLE_TAG:
        case RawMessageContentItemSubType::EMPHASIS_TAG:
        case RawMessageContentItemSubType::FONT_TAG:
        case RawMessageContentItemSubType::ITALIC_TAG:
        case RawMessageContentItemSubType::LINK_TAG:
        case RawMessageContentItemSubType::RGB_COLOR_TAG:
        case RawMessageContentItemSubType::UNDERLINE_TAG:
        case RawMessageContentItemSubType::YAHOO_ALT_TAG:
        case RawMessageContentItemSubType::YAHOO_FADE_TAG:
        case RawMessageContentItemSubType::FLAG_ICON:
        case RawMessageContentItemSubType::SKYPE_EMOTICON:
        case RawMessageContentItemSubType::LINE_BREAK:
        case RawMessageContentItemSubType::MEDIA_ATTACHMENT:
        case RawMessageContentItemSubType::SKYPE_QUOTE:
        case RawMessageContentItemSubType::TEXT_SECTION:
            mut_type = (RawMessageContentItemSubType)code;
            break;
        default:
            invariant_violation("Invalid deserialized RawMessageContentItemSubType value (%lld)", (int64_t)code);
    }

    return mut_stream;
}

QDataStream& operator<< (QDataStream& mut_stream, RawMessageContentItemSubType type) {
    mut_stream << (uint8_t)type;

    return mut_stream;
}

}}}

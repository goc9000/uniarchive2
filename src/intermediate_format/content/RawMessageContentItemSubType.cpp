/**
 * intermediate_format/content/RawMessageContentItemSubType.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): d57882ca878cc9cca50b3854442dffaca53ef4ece74f144c063b1c02a5c91952
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/content/RawMessageContentItemSubType.h"
#include "utils/qt/shortcuts.h"
#include "utils/serialization/deserialization_helpers.h"

#include <QMap>
#include <QtDebug>

namespace uniarchive2 { namespace intermediate_format { namespace content {

using namespace uniarchive2::utils::serialization;

QString name_for_raw_message_content_item_sub_type(RawMessageContentItemSubType type) {
    switch (type) {
        case RawMessageContentItemSubType::ANSI_COLOR_TAG:
            return "ANSIColorTag";
        case RawMessageContentItemSubType::ANSI_RESET_TAG:
            return "ANSIResetTag";
        case RawMessageContentItemSubType::BOLD_TAG:
            return "BoldTag";
        case RawMessageContentItemSubType::CSS_STYLE_TAG:
            return "CSSStyleTag";
        case RawMessageContentItemSubType::EMPHASIS_TAG:
            return "EmphasisTag";
        case RawMessageContentItemSubType::FONT_TAG:
            return "FontTag";
        case RawMessageContentItemSubType::ITALIC_TAG:
            return "ItalicTag";
        case RawMessageContentItemSubType::LINK_TAG:
            return "LinkTag";
        case RawMessageContentItemSubType::RGB_COLOR_TAG:
            return "RGBColorTag";
        case RawMessageContentItemSubType::UNDERLINE_TAG:
            return "UnderlineTag";
        case RawMessageContentItemSubType::YAHOO_ALT_TAG:
            return "YahooAltTag";
        case RawMessageContentItemSubType::YAHOO_FADE_TAG:
            return "YahooFadeTag";
        case RawMessageContentItemSubType::FLAG_ICON:
            return "FlagIcon";
        case RawMessageContentItemSubType::SKYPE_EMOTICON:
            return "SkypeEmoticon";
        case RawMessageContentItemSubType::LINE_BREAK:
            return "LineBreak";
        case RawMessageContentItemSubType::MEDIA_ATTACHMENT:
            return "MediaAttachment";
        case RawMessageContentItemSubType::SKYPE_QUOTE:
            return "SkypeQuote";
        case RawMessageContentItemSubType::TEXT_SECTION:
            return "TextSection";
    }

    invariant_violation("Invalid RawMessageContentItemSubType value (%lld)", (int64_t)type);
}

QString symbol_for_raw_message_content_item_sub_type(RawMessageContentItemSubType type) {
    switch (type) {
        case RawMessageContentItemSubType::ANSI_COLOR_TAG:
            return "ansi_color_tag";
        case RawMessageContentItemSubType::ANSI_RESET_TAG:
            return "ansi_reset_tag";
        case RawMessageContentItemSubType::BOLD_TAG:
            return "bold_tag";
        case RawMessageContentItemSubType::CSS_STYLE_TAG:
            return "css_style_tag";
        case RawMessageContentItemSubType::EMPHASIS_TAG:
            return "emphasis_tag";
        case RawMessageContentItemSubType::FONT_TAG:
            return "font_tag";
        case RawMessageContentItemSubType::ITALIC_TAG:
            return "italic_tag";
        case RawMessageContentItemSubType::LINK_TAG:
            return "link_tag";
        case RawMessageContentItemSubType::RGB_COLOR_TAG:
            return "rgb_color_tag";
        case RawMessageContentItemSubType::UNDERLINE_TAG:
            return "underline_tag";
        case RawMessageContentItemSubType::YAHOO_ALT_TAG:
            return "yahoo_alt_tag";
        case RawMessageContentItemSubType::YAHOO_FADE_TAG:
            return "yahoo_fade_tag";
        case RawMessageContentItemSubType::FLAG_ICON:
            return "flag_icon";
        case RawMessageContentItemSubType::SKYPE_EMOTICON:
            return "skype_emoticon";
        case RawMessageContentItemSubType::LINE_BREAK:
            return "line_break";
        case RawMessageContentItemSubType::MEDIA_ATTACHMENT:
            return "media_attachment";
        case RawMessageContentItemSubType::SKYPE_QUOTE:
            return "skype_quote";
        case RawMessageContentItemSubType::TEXT_SECTION:
            return "text_section";
    }

    invariant_violation("Invalid RawMessageContentItemSubType value (%lld)", (int64_t)type);
}

RawMessageContentItemSubType raw_message_content_item_sub_type_from_symbol(IMM(QString) symbol) {
    const static QMap<QString, RawMessageContentItemSubType> MAP = {
        { "ansi_color_tag",   RawMessageContentItemSubType::ANSI_COLOR_TAG },
        { "ansi_reset_tag",   RawMessageContentItemSubType::ANSI_RESET_TAG },
        { "bold_tag",         RawMessageContentItemSubType::BOLD_TAG },
        { "css_style_tag",    RawMessageContentItemSubType::CSS_STYLE_TAG },
        { "emphasis_tag",     RawMessageContentItemSubType::EMPHASIS_TAG },
        { "font_tag",         RawMessageContentItemSubType::FONT_TAG },
        { "italic_tag",       RawMessageContentItemSubType::ITALIC_TAG },
        { "link_tag",         RawMessageContentItemSubType::LINK_TAG },
        { "rgb_color_tag",    RawMessageContentItemSubType::RGB_COLOR_TAG },
        { "underline_tag",    RawMessageContentItemSubType::UNDERLINE_TAG },
        { "yahoo_alt_tag",    RawMessageContentItemSubType::YAHOO_ALT_TAG },
        { "yahoo_fade_tag",   RawMessageContentItemSubType::YAHOO_FADE_TAG },
        { "flag_icon",        RawMessageContentItemSubType::FLAG_ICON },
        { "skype_emoticon",   RawMessageContentItemSubType::SKYPE_EMOTICON },
        { "line_break",       RawMessageContentItemSubType::LINE_BREAK },
        { "media_attachment", RawMessageContentItemSubType::MEDIA_ATTACHMENT },
        { "skype_quote",      RawMessageContentItemSubType::SKYPE_QUOTE },
        { "text_section",     RawMessageContentItemSubType::TEXT_SECTION },
    };

    if (MAP.contains(symbol)) {
        return MAP[symbol];
    }

    invariant_violation("Invalid RawMessageContentItemSubType symbol ('%s')", QP(symbol));
}

QDebug operator<< (QDebug stream, RawMessageContentItemSubType type) {
    stream << QP(name_for_raw_message_content_item_sub_type(type));

    return stream;
}

QDataStream& operator>> (QDataStream& mut_stream, RawMessageContentItemSubType& mut_type) {
    uint8_t code = must_deserialize(mut_stream, uint8_t);

    switch ((RawMessageContentItemSubType)code) {
        case RawMessageContentItemSubType::ANSI_COLOR_TAG:
        case RawMessageContentItemSubType::ANSI_RESET_TAG:
        case RawMessageContentItemSubType::BOLD_TAG:
        case RawMessageContentItemSubType::CSS_STYLE_TAG:
        case RawMessageContentItemSubType::EMPHASIS_TAG:
        case RawMessageContentItemSubType::FONT_TAG:
        case RawMessageContentItemSubType::ITALIC_TAG:
        case RawMessageContentItemSubType::LINK_TAG:
        case RawMessageContentItemSubType::RGB_COLOR_TAG:
        case RawMessageContentItemSubType::UNDERLINE_TAG:
        case RawMessageContentItemSubType::YAHOO_ALT_TAG:
        case RawMessageContentItemSubType::YAHOO_FADE_TAG:
        case RawMessageContentItemSubType::FLAG_ICON:
        case RawMessageContentItemSubType::SKYPE_EMOTICON:
        case RawMessageContentItemSubType::LINE_BREAK:
        case RawMessageContentItemSubType::MEDIA_ATTACHMENT:
        case RawMessageContentItemSubType::SKYPE_QUOTE:
        case RawMessageContentItemSubType::TEXT_SECTION:
            mut_type = (RawMessageContentItemSubType)code;
            break;
        default:
            invariant_violation("Invalid deserialized RawMessageContentItemSubType value (%lld)", (int64_t)code);
    }

    return mut_stream;
}

QDataStream& operator<< (QDataStream& mut_stream, RawMessageContentItemSubType type) {
    mut_stream << (uint8_t)type;

    return mut_stream;
}

}}}

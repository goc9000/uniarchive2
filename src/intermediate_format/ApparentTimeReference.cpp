/**
 * intermediate_format/ApparentTimeReference.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): f6424422405a4e3d814e2d0848a49715915e8854001b9681f47f0ce2d65e5fe1
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/ApparentTimeReference.h"
#include "utils/qt/shortcuts.h"
#include "utils/serialization/deserialization_helpers.h"

#include <QMap>
#include <QtDebug>

namespace uniarchive2 { namespace intermediate_format {

using namespace uniarchive2::utils::serialization;

QString name_for_apparent_time_reference(ApparentTimeReference reference) {
    switch (reference) {
        case ApparentTimeReference::UNKNOWN:
            return "unknown";
        case ApparentTimeReference::LOCAL_TIME:
            return "local time";
        case ApparentTimeReference::SPECIFIED:
            return "specified";
    }

    invariant_violation("Invalid ApparentTimeReference value (%lld)", (int64_t)reference);
}

QString symbol_for_apparent_time_reference(ApparentTimeReference reference) {
    switch (reference) {
        case ApparentTimeReference::UNKNOWN:
            return "unknown";
        case ApparentTimeReference::LOCAL_TIME:
            return "local_time";
        case ApparentTimeReference::SPECIFIED:
            return "specified";
    }

    invariant_violation("Invalid ApparentTimeReference value (%lld)", (int64_t)reference);
}

ApparentTimeReference apparent_time_reference_from_symbol(IMM(QString) symbol) {
    const static QMap<QString, ApparentTimeReference> MAP = {
        { "unknown",    ApparentTimeReference::UNKNOWN },
        { "local_time", ApparentTimeReference::LOCAL_TIME },
        { "specified",  ApparentTimeReference::SPECIFIED },
    };

    if (MAP.contains(symbol)) {
        return MAP[symbol];
    }

    invariant_violation("Invalid ApparentTimeReference symbol ('%s')", QP(symbol));
}

QDebug operator<< (QDebug stream, ApparentTimeReference reference) {
    stream << QP(name_for_apparent_time_reference(reference));

    return stream;
}

QDataStream& operator>> (QDataStream& mut_stream, ApparentTimeReference& mut_reference) {
    uint8_t code = must_deserialize(mut_stream, uint8_t);

    switch ((ApparentTimeReference)code) {
        case ApparentTimeReference::UNKNOWN:
        case ApparentTimeReference::LOCAL_TIME:
        case ApparentTimeReference::SPECIFIED:
            mut_reference = (ApparentTimeReference)code;
            break;
        default:
            invariant_violation("Invalid deserialized ApparentTimeReference value (%lld)", (int64_t)code);
    }

    return mut_stream;
}

QDataStream& operator<< (QDataStream& mut_stream, ApparentTimeReference reference) {
    mut_stream << (uint8_t)reference;

    return mut_stream;
}

}}

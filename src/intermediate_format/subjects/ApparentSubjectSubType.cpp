/**
 * intermediate_format/subjects/ApparentSubjectSubType.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): da3403e6365228439821067296f247e4178fa65023ec0924d7cb90882b17030f
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/subjects/ApparentSubjectSubType.h"
#include "utils/qt/shortcuts.h"

#include <QtDebug>

namespace uniarchive2 { namespace intermediate_format { namespace subjects {

QString name_for_apparent_subject_sub_type(ApparentSubjectSubType type) {
    switch (type) {
        case ApparentSubjectSubType::IMPLICITSUBJECT:
            return "ImplicitSubject";
        case ApparentSubjectSubType::SUBJECTGIVENASSCREENNAME:
            return "SubjectGivenAsScreenName";
        case ApparentSubjectSubType::SUBJECTGIVENASACCOUNT:
            return "SubjectGivenAsAccount";
        case ApparentSubjectSubType::FULLYSPECIFIEDSUBJECT:
            return "FullySpecifiedSubject";
    }

    invariant_violation("Invalid ApparentSubjectSubType value (%d)", type);
}

QDebug operator<< (QDebug stream, ApparentSubjectSubType type) {
    stream << QP(name_for_apparent_subject_sub_type(type));

    return stream;
}

QDataStream& operator<< (QDataStream& mut_stream, ApparentSubjectSubType type) {
    mut_stream << (quint32)type;

    return mut_stream;
}

}}}

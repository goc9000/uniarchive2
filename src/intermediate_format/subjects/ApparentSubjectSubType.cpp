/**
 * intermediate_format/subjects/ApparentSubjectSubType.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): 5dab7e73ba9882411461a4886d77f0cd73c3aebd7e8e8e57ec0e1105dfaec991
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/subjects/ApparentSubjectSubType.h"
#include "utils/qt/shortcuts.h"
#include "utils/serialization/deserialization_helpers.h"

#include <QMap>
#include <QtDebug>

namespace uniarchive2 { namespace intermediate_format { namespace subjects {

using namespace uniarchive2::utils::serialization;

QString name_for_apparent_subject_sub_type(ApparentSubjectSubType type) {
    switch (type) {
        case ApparentSubjectSubType::IMPLICIT:
            return "Implicit";
        case ApparentSubjectSubType::SCREEN_NAME:
            return "ScreenName";
        case ApparentSubjectSubType::ACCOUNT:
            return "Account";
        case ApparentSubjectSubType::FULLY_SPECIFIED:
            return "FullySpecified";
    }

    invariant_violation("Invalid ApparentSubjectSubType value (%lld)", (int64_t)type);
}

QString symbol_for_apparent_subject_sub_type(ApparentSubjectSubType type) {
    switch (type) {
        case ApparentSubjectSubType::IMPLICIT:
            return "implicit";
        case ApparentSubjectSubType::SCREEN_NAME:
            return "screen_name";
        case ApparentSubjectSubType::ACCOUNT:
            return "account";
        case ApparentSubjectSubType::FULLY_SPECIFIED:
            return "fully_specified";
    }

    invariant_violation("Invalid ApparentSubjectSubType value (%lld)", (int64_t)type);
}

ApparentSubjectSubType apparent_subject_sub_type_from_symbol(IMM(QString) symbol) {
    const static QMap<QString, ApparentSubjectSubType> MAP = {
        { "implicit",        ApparentSubjectSubType::IMPLICIT },
        { "screen_name",     ApparentSubjectSubType::SCREEN_NAME },
        { "account",         ApparentSubjectSubType::ACCOUNT },
        { "fully_specified", ApparentSubjectSubType::FULLY_SPECIFIED },
    };

    if (MAP.contains(symbol)) {
        return MAP[symbol];
    }

    invariant_violation("Invalid ApparentSubjectSubType symbol ('%s')", QP(symbol));
}

QDebug operator<< (QDebug stream, ApparentSubjectSubType type) {
    stream << QP(name_for_apparent_subject_sub_type(type));

    return stream;
}

QDataStream& operator>> (QDataStream& mut_stream, ApparentSubjectSubType& mut_type) {
    uint8_t code = must_deserialize(mut_stream, uint8_t);

    switch ((ApparentSubjectSubType)code) {
        case ApparentSubjectSubType::IMPLICIT:
        case ApparentSubjectSubType::SCREEN_NAME:
        case ApparentSubjectSubType::ACCOUNT:
        case ApparentSubjectSubType::FULLY_SPECIFIED:
            mut_type = (ApparentSubjectSubType)code;
            break;
        default:
            invariant_violation("Invalid deserialized ApparentSubjectSubType value (%lld)", (int64_t)code);
    }

    return mut_stream;
}

QDataStream& operator<< (QDataStream& mut_stream, ApparentSubjectSubType type) {
    mut_stream << (uint8_t)type;

    return mut_stream;
}

}}}

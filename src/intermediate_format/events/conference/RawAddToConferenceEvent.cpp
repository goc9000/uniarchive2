/**
 * intermediate_format/events/conference/RawAddToConferenceEvent.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): 713406fc6d9f4e5e391db634f67fe824d064d4e515bb804c7afccbd725106582
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/events/conference/RawAddToConferenceEvent.h"
#include "utils/qt/debug_extras.h"
#include "utils/serialization/serialization_helpers.h"

namespace uniarchive2 { namespace intermediate_format { namespace events {

RawAddToConferenceEvent::RawAddToConferenceEvent(
    IMM(ApparentTime) timestamp,
    uint32_t index,
    TAKE_VEC(ApparentSubject) addees
) : RawEvent(timestamp, index), addees(move(addees)) {
    sanityCheckMandatoryParameters();
}

RawAddToConferenceEvent::RawAddToConferenceEvent(
    IMM(ApparentTime) timestamp,
    uint32_t index,
    TAKE(ApparentSubject) addee
) : RawEvent(timestamp, index) {
    addees.push_back(move(addee));
    sanityCheckMandatoryParameters();
}

RawAddToConferenceEvent::RawAddToConferenceEvent(
    IMM(ApparentTime) timestamp,
    uint32_t index,
    TAKE(ApparentSubject) adder,
    TAKE_VEC(ApparentSubject) addees
) : RawEvent(timestamp, index), adder(move(adder)), addees(move(addees)) {
    sanityCheckMandatoryParameters();
    invariant(this->adder, "Parameter 'adder' cannot have empty value");
}

RawAddToConferenceEvent::RawAddToConferenceEvent(
    IMM(ApparentTime) timestamp,
    uint32_t index,
    TAKE(ApparentSubject) adder,
    TAKE(ApparentSubject) addee
) : RawEvent(timestamp, index), adder(move(adder)) {
    addees.push_back(move(addee));
    sanityCheckMandatoryParameters();
    invariant(this->adder, "Parameter 'adder' cannot have empty value");
}

void RawAddToConferenceEvent::sanityCheckMandatoryParameters() const {
    for (IMM(auto) item : addees) {
        invariant(item, "Parameter 'addees' cannot have empty entries");
    }
}

RawEventSubType RawAddToConferenceEvent::subType() const {
    return RawEventSubType::ADD_TO_CONFERENCE;
}

void RawAddToConferenceEvent::serializeDetailsToStream(QDataStream& mut_stream) const {
    serialize_optional_unique_ptr(mut_stream, adder);
    mut_stream << addees << asModerator;
}

void RawAddToConferenceEvent::writeDetailsToDebugStream(QDebug stream) const {
    if (adder) {
        stream << " adder=" << adder;
    }
    if (addees.size() == 1) {
        stream << " addee=" << addees.front();
    } else {
        stream << " addees=" << addees;
    }
    if (asModerator) {
        stream << " as_moderator=" << asModerator;
    }
}

}}}

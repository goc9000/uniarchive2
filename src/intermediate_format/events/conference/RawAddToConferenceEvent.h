/**
 * intermediate_format/events/conference/RawAddToConferenceEvent.h
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): 4c23bb68e36fee13638ebbcf01546526c0ad6686b9ac5263a8014ce537d3b2df
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#ifndef UNIARCHIVE2_INTERMEDIATE_FORMAT_EVENTS_RAWADDTOCONFERENCEEVENT_H
#define UNIARCHIVE2_INTERMEDIATE_FORMAT_EVENTS_RAWADDTOCONFERENCEEVENT_H

#include "intermediate_format/events/RawEvent.h"
#include "intermediate_format/subjects/ApparentSubject.h"

namespace uniarchive2 { namespace intermediate_format { namespace events {

using namespace uniarchive2::intermediate_format::subjects;

struct RawAddToConferenceEvent : RawEvent {
public:
    unique_ptr<ApparentSubject> adder;
    vector<unique_ptr<ApparentSubject>> addees;

    optional<bool> asModerator;

    RawAddToConferenceEvent(IMM(ApparentTime) timestamp, uint index, TAKE_VEC(ApparentSubject) addees);
    RawAddToConferenceEvent(IMM(ApparentTime) timestamp, uint index, TAKE(ApparentSubject) addee);
    RawAddToConferenceEvent(
        IMM(ApparentTime) timestamp,
        uint index,
        TAKE(ApparentSubject) adder,
        TAKE_VEC(ApparentSubject) addees
    );
    RawAddToConferenceEvent(
        IMM(ApparentTime) timestamp,
        uint index,
        TAKE(ApparentSubject) adder,
        TAKE(ApparentSubject) addee
    );

    virtual RawEventSubType subType() const;

protected:
    virtual void serializeDetailsToStream(QDataStream& mut_stream) const;

    virtual void writeDetailsToDebugStream(QDebug stream) const;

private:
    void sanityCheckMandatoryParameters() const;
};

}}}

#endif //UNIARCHIVE2_INTERMEDIATE_FORMAT_EVENTS_RAWADDTOCONFERENCEEVENT_H

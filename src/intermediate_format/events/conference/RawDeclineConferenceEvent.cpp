/**
 * intermediate_format/events/conference/RawDeclineConferenceEvent.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): d2e086b9cb513ed761f57062dc9a7bd42ef5a78d0cf238fd537e7ec5e0d426cd
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/events/conference/RawDeclineConferenceEvent.h"
#include "utils/qt/debug_extras.h"
#include "utils/serialization/deserialization_helpers.h"
#include "utils/serialization/serialization_helpers.h"

namespace uniarchive2 { namespace intermediate_format { namespace events {

using namespace uniarchive2::utils::serialization;

RawDeclineConferenceEvent::RawDeclineConferenceEvent(
    IMM(ApparentTime) timestamp,
    uint32_t index,
    TAKE(ApparentSubject) subject
) : RawEvent(timestamp, index), subject(move(subject)) {
    sanityCheckMandatoryParameters();
}

void RawDeclineConferenceEvent::sanityCheckMandatoryParameters() const {
    invariant(subject, "Parameter 'subject' cannot have empty value");
}

RawEventSubType RawDeclineConferenceEvent::subType() const {
    return RawEventSubType::DECLINE_CONFERENCE;
}

CEDE(RawDeclineConferenceEvent) RawDeclineConferenceEvent::deserializeFromStream(
    QDataStream& mut_stream,
    bool skip_type
) {
    invariant_violation("RawDeclineConferenceEvent deserialization not yet implemented");
}

void RawDeclineConferenceEvent::serializeDetailsToStream(QDataStream& mut_stream) const {
    mut_stream << subject << message;
}

void RawDeclineConferenceEvent::writeDetailsToDebugStream(QDebug stream) const {
    stream << " subject=" << subject;
    if (message) {
        stream << " message=" << message;
    }
}

}}}

/**
 * intermediate_format/events/conference/RawChangeConferencePictureEvent.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): e64739015695d1a2eb12febc4573b986b057817adac241d9334ed732db40a4d3
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/events/conference/RawChangeConferencePictureEvent.h"
#include "intermediate_format/subjects/visitor/visit_subject_utils.h"
#include "utils/qt/debug_extras.h"
#include "utils/serialization/deserialization_helpers.h"
#include "utils/serialization/serialization_helpers.h"

namespace uniarchive2 { namespace intermediate_format { namespace events {

using namespace uniarchive2::utils::serialization;

RawChangeConferencePictureEvent::RawChangeConferencePictureEvent(
    IMM(ApparentTime) timestamp,
    uint32_t index,
    TAKE(ApparentSubject) subject
) : RawEvent(timestamp, index), subject(move(subject)) {
    sanityCheckMandatoryParameters();
}

void RawChangeConferencePictureEvent::sanityCheckMandatoryParameters() const {
    invariant(subject, "Parameter 'subject' cannot have empty value");
}

RawEventSubType RawChangeConferencePictureEvent::subType() const {
    return RawEventSubType::CHANGE_CONFERENCE_PICTURE;
}

bool RawChangeConferencePictureEvent::visitSubjectsImpl(IMM(visit_subjects_callback_t) callback) {
    return visit_subjects(subject, callback);
}

CEDE(RawChangeConferencePictureEvent) RawChangeConferencePictureEvent::deserializeFromStream(
    QDataStream& mut_stream,
    bool skip_type
) {
    maybeDeserializeType(skip_type, mut_stream, RawEventSubType::CHANGE_CONFERENCE_PICTURE);

    ApparentTime timestamp = must_deserialize(mut_stream, ApparentTime);
    uint32_t index = must_deserialize(mut_stream, uint32_t);
    optional<QByteArray> skype_guid = must_deserialize(mut_stream, optional<QByteArray>);
    unique_ptr<ApparentSubject> subject = must_deserialize(mut_stream, unique_ptr<ApparentSubject>);

    unique_ptr<RawChangeConferencePictureEvent> event = make_unique<RawChangeConferencePictureEvent>(
        timestamp,
        index,
        move(subject)
    );
    event->skypeGUID = skype_guid;

    return event;
}

void RawChangeConferencePictureEvent::serializeDetailsToStream(QDataStream& mut_stream) const {
    mut_stream << subject;
}

void RawChangeConferencePictureEvent::writeDetailsToDebugStream(QDebug stream) const {
    stream << " subject=" << subject;
}

}}}

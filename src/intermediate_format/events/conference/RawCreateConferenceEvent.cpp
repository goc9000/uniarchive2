/**
 * intermediate_format/events/conference/RawCreateConferenceEvent.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): 24d68d46736d193c20610d23db3627e15b59af0571ee8af913ddcdc4e056b9e9
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/events/conference/RawCreateConferenceEvent.h"
#include "utils/qt/debug_extras.h"

namespace uniarchive2 { namespace intermediate_format { namespace events {

RawCreateConferenceEvent::RawCreateConferenceEvent(
    IMM(ApparentTime) timestamp,
    uint32_t index,
    TAKE(ApparentSubject) creator
) : RawEvent(timestamp, index), creator(move(creator)) {
    sanityCheckMandatoryParameters();
}

RawCreateConferenceEvent::RawCreateConferenceEvent(
    IMM(ApparentTime) timestamp,
    uint32_t index,
    TAKE(ApparentSubject) creator,
    IMM(QString) conference_name
) : RawEvent(timestamp, index), creator(move(creator)), conferenceName(conference_name) {
    sanityCheckMandatoryParameters();
}

void RawCreateConferenceEvent::sanityCheckMandatoryParameters() const {
    invariant(creator, "Parameter 'creator' cannot have empty value");
}

RawEventSubType RawCreateConferenceEvent::subType() const {
    return RawEventSubType::CREATE_CONFERENCE;
}

void RawCreateConferenceEvent::serializeDetailsToStream(QDataStream& mut_stream) const {
    // TODO: add field serialization code
}

void RawCreateConferenceEvent::writeDetailsToDebugStream(QDebug stream) const {
    stream << " creator=" << creator;
    if (conferenceName) {
        stream << " conference_name=" << conferenceName;
    }
}

}}}

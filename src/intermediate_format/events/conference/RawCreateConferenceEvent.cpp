/**
 * intermediate_format/events/conference/RawCreateConferenceEvent.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): a2fefc24f457d1898d241e08e0bca7cde17999fc06b81b28b575b6347b624694
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/events/conference/RawCreateConferenceEvent.h"
#include "intermediate_format/subjects/visitor/visit_subject_utils.h"
#include "utils/qt/debug_extras.h"
#include "utils/serialization/deserialization_helpers.h"
#include "utils/serialization/serialization_helpers.h"

namespace uniarchive2 { namespace intermediate_format { namespace events {

using namespace uniarchive2::utils::serialization;

RawCreateConferenceEvent::RawCreateConferenceEvent(
    IMM(ApparentTime) timestamp,
    uint32_t index,
    TAKE(ApparentSubject) creator
) : RawEvent(timestamp, index), creator(move(creator)) {
    sanityCheckMandatoryParameters();
}

RawCreateConferenceEvent::RawCreateConferenceEvent(
    IMM(ApparentTime) timestamp,
    uint32_t index,
    TAKE(ApparentSubject) creator,
    IMM(QString) conference_name
) : RawEvent(timestamp, index), creator(move(creator)), conferenceName(conference_name) {
    sanityCheckMandatoryParameters();
}

void RawCreateConferenceEvent::sanityCheckMandatoryParameters() const {
    invariant(creator, "Parameter 'creator' cannot have empty value");
}

RawEventSubType RawCreateConferenceEvent::subType() const {
    return RawEventSubType::CREATE_CONFERENCE;
}

bool RawCreateConferenceEvent::visitSubjectsImpl(IMM(visit_subjects_callback_t) callback) const {
    return visit_subjects(creator, callback);
}

bool RawCreateConferenceEvent::alterSubjectsImpl(IMM(alter_subjects_callback_t) callback) {
    return alter_subjects(creator, callback);
}

CEDE(RawCreateConferenceEvent) RawCreateConferenceEvent::deserializeFromStream(
    QDataStream& mut_stream,
    bool skip_type
) {
    maybeDeserializeType(skip_type, mut_stream, RawEventSubType::CREATE_CONFERENCE);

    ApparentTime timestamp = must_deserialize(mut_stream, ApparentTime);
    uint32_t index = must_deserialize(mut_stream, uint32_t);
    optional<QByteArray> skype_guid = must_deserialize(mut_stream, optional<QByteArray>);
    unique_ptr<ApparentSubject> creator = must_deserialize(mut_stream, unique_ptr<ApparentSubject>);
    optional<QString> conference_name = must_deserialize(mut_stream, optional<QString>);

    unique_ptr<RawCreateConferenceEvent> event = make_unique<RawCreateConferenceEvent>(timestamp, index, move(creator));
    event->skypeGUID = skype_guid;
    event->conferenceName = conference_name;

    return event;
}

void RawCreateConferenceEvent::serializeDetailsToStream(QDataStream& mut_stream) const {
    mut_stream << creator << conferenceName;
}

void RawCreateConferenceEvent::writeDetailsToDebugStream(QDebug stream) const {
    stream << " creator=" << creator;
    if (conferenceName) {
        stream << " conference_name=" << conferenceName;
    }
}

}}}

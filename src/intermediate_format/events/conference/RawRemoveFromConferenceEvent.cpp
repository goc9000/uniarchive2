/**
 * intermediate_format/events/conference/RawRemoveFromConferenceEvent.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): a8672cc5be3c4168d9d44db81207218cdba75b5c22c198dad4cb520c3f801c4a
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/events/conference/RawRemoveFromConferenceEvent.h"
#include "utils/qt/debug_extras.h"
#include "utils/serialization/deserialization_helpers.h"
#include "utils/serialization/serialization_helpers.h"

namespace uniarchive2 { namespace intermediate_format { namespace events {

using namespace uniarchive2::utils::serialization;

RawRemoveFromConferenceEvent::RawRemoveFromConferenceEvent(
    IMM(ApparentTime) timestamp,
    uint32_t index,
    TAKE(ApparentSubject) removee
) : RawEvent(timestamp, index), removee(move(removee)) {
    sanityCheckMandatoryParameters();
}

RawRemoveFromConferenceEvent::RawRemoveFromConferenceEvent(
    IMM(ApparentTime) timestamp,
    uint32_t index,
    TAKE(ApparentSubject) remover,
    TAKE(ApparentSubject) removee
) : RawEvent(timestamp, index), remover(move(remover)), removee(move(removee)) {
    sanityCheckMandatoryParameters();
    invariant(this->remover, "Parameter 'remover' cannot have empty value");
}

void RawRemoveFromConferenceEvent::sanityCheckMandatoryParameters() const {
    invariant(removee, "Parameter 'removee' cannot have empty value");
}

RawEventSubType RawRemoveFromConferenceEvent::subType() const {
    return RawEventSubType::REMOVE_FROM_CONFERENCE;
}

void RawRemoveFromConferenceEvent::visitSubjectsImpl(ApparentSubjectVisitor& UNUSED visitor) {
    // No fields to visit
}

CEDE(RawRemoveFromConferenceEvent) RawRemoveFromConferenceEvent::deserializeFromStream(
    QDataStream& mut_stream,
    bool skip_type
) {
    maybeDeserializeType(skip_type, mut_stream, RawEventSubType::REMOVE_FROM_CONFERENCE);

    ApparentTime timestamp = must_deserialize(mut_stream, ApparentTime);
    uint32_t index = must_deserialize(mut_stream, uint32_t);
    optional<QByteArray> skype_guid = must_deserialize(mut_stream, optional<QByteArray>);
    unique_ptr<ApparentSubject> remover = must_deserialize_optional_unique_ptr(mut_stream, ApparentSubject);
    unique_ptr<ApparentSubject> removee = must_deserialize(mut_stream, unique_ptr<ApparentSubject>);

    unique_ptr<RawRemoveFromConferenceEvent> event = make_unique<RawRemoveFromConferenceEvent>(
        timestamp,
        index,
        move(removee)
    );
    event->skypeGUID = skype_guid;
    event->remover = move(remover);

    return event;
}

void RawRemoveFromConferenceEvent::serializeDetailsToStream(QDataStream& mut_stream) const {
    serialize_optional_unique_ptr(mut_stream, remover);
    mut_stream << removee;
}

void RawRemoveFromConferenceEvent::writeDetailsToDebugStream(QDebug stream) const {
    if (remover) {
        stream << " remover=" << remover;
    }
    stream << " removee=" << removee;
}

}}}

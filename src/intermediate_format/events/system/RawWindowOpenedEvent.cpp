/**
 * intermediate_format/events/system/RawWindowOpenedEvent.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): 57ef517aef4169c841279e8c385d87c67a7fff87584c0635dee6c9d9c59371e7
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/events/system/RawWindowOpenedEvent.h"
#include "utils/serialization/deserialization_helpers.h"

namespace uniarchive2 { namespace intermediate_format { namespace events {

using namespace uniarchive2::utils::serialization;

RawWindowOpenedEvent::RawWindowOpenedEvent(IMM(ApparentTime) timestamp, uint32_t index) : RawEvent(timestamp, index) {
}

RawEventSubType RawWindowOpenedEvent::subType() const {
    return RawEventSubType::WINDOW_OPENED;
}

CEDE(RawWindowOpenedEvent) RawWindowOpenedEvent::deserializeFromStream(QDataStream& mut_stream, bool skip_type) {
    maybeDeserializeType(skip_type, mut_stream, RawEventSubType::WINDOW_OPENED);

    ApparentTime timestamp = must_deserialize(mut_stream, ApparentTime);
    uint32_t index = must_deserialize(mut_stream, uint32_t);
    optional<QByteArray> skype_guid = must_deserialize(mut_stream, optional<QByteArray>);

    unique_ptr<RawWindowOpenedEvent> event = make_unique<RawWindowOpenedEvent>(timestamp, index);
    event->skypeGUID = skype_guid;

    return event;
}

void RawWindowOpenedEvent::serializeDetailsToStream(QDataStream& UNUSED mut_stream) const {
}

void RawWindowOpenedEvent::writeDetailsToDebugStream(QDebug UNUSED stream) const {
}

}}}

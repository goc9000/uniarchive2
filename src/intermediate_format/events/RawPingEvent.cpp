/**
 * intermediate_format/events/RawPingEvent.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): b65f9b92dfc782e4a8b2d881b1042e24a192e3d3fbd4c2d77737f78abe4a0a07
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/events/RawPingEvent.h"
#include "utils/qt/debug_extras.h"
#include "utils/serialization/serialization_helpers.h"

namespace uniarchive2 { namespace intermediate_format { namespace events {

RawPingEvent::RawPingEvent(IMM(ApparentTime) timestamp, uint32_t index, TAKE(ApparentSubject) pinger)
  : RawFailableEvent(timestamp, index), pinger(move(pinger)) {
    sanityCheckMandatoryParameters();
}

void RawPingEvent::sanityCheckMandatoryParameters() const {
    invariant(pinger, "Parameter 'pinger' cannot have empty value");
}

RawEventSubType RawPingEvent::subType() const {
    return RawEventSubType::PING;
}

void RawPingEvent::serializeFailableEventDetailsToStream(QDataStream& mut_stream) const {
    mut_stream << pinger;
    serialize_optional_unique_ptr(mut_stream, pingee);
}

void RawPingEvent::writeFailableEventDetailsToDebugStream(QDebug stream) const {
    stream << " pinger=" << pinger;
    if (pingee) {
        stream << " pingee=" << pingee;
    }
}

}}}

/**
 * intermediate_format/events/RawPingEvent.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): 8b9c225f0aea717fef5276b5b0d010962ecc49648abbd4144e0e3cfc523db319
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/events/RawPingEvent.h"
#include "intermediate_format/subjects/visitor/visit_subject_utils.h"
#include "utils/qt/debug_extras.h"
#include "utils/serialization/deserialization_helpers.h"
#include "utils/serialization/serialization_helpers.h"

namespace uniarchive2 { namespace intermediate_format { namespace events {

using namespace uniarchive2::utils::serialization;

RawPingEvent::RawPingEvent(IMM(ApparentTime) timestamp, uint32_t index, TAKE(ApparentSubject) pinger)
  : RawFailableEvent(timestamp, index), pinger(move(pinger)) {
    sanityCheckMandatoryParameters();
}

void RawPingEvent::sanityCheckMandatoryParameters() const {
    invariant(pinger, "Parameter 'pinger' cannot have empty value");
}

RawEventSubType RawPingEvent::subType() const {
    return RawEventSubType::PING;
}

bool RawPingEvent::visitSubjectsImpl(IApparentSubjectVisitor& visitor) {
    return visit_subjects(pinger, visitor) && visit_subjects(pingee, visitor);
}

CEDE(RawPingEvent) RawPingEvent::deserializeFromStream(QDataStream& mut_stream, bool skip_type) {
    maybeDeserializeType(skip_type, mut_stream, RawEventSubType::PING);

    ApparentTime timestamp = must_deserialize(mut_stream, ApparentTime);
    uint32_t index = must_deserialize(mut_stream, uint32_t);
    optional<QByteArray> skype_guid = must_deserialize(mut_stream, optional<QByteArray>);
    optional<PingFailReason> fail_reason = must_deserialize(mut_stream, optional<PingFailReason>);
    unique_ptr<ApparentSubject> pinger = must_deserialize(mut_stream, unique_ptr<ApparentSubject>);
    unique_ptr<ApparentSubject> pingee = must_deserialize_optional_unique_ptr(mut_stream, ApparentSubject);

    unique_ptr<RawPingEvent> event = make_unique<RawPingEvent>(timestamp, index, move(pinger));
    event->reasonFailed = fail_reason;
    event->skypeGUID = skype_guid;
    event->pingee = move(pingee);

    return event;
}

void RawPingEvent::serializeFailableEventDetailsToStream(QDataStream& mut_stream) const {
    mut_stream << pinger;
    serialize_optional_unique_ptr(mut_stream, pingee);
}

void RawPingEvent::writeFailableEventDetailsToDebugStream(QDebug stream) const {
    stream << " pinger=" << pinger;
    if (pingee) {
        stream << " pingee=" << pingee;
    }
}

}}}

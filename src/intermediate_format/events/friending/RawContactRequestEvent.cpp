/**
 * intermediate_format/events/friending/RawContactRequestEvent.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): 3479ab698a0e04fed1be0ca4805eff7d6b76087fed2ae566dce29c4c83c1af01
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/events/friending/RawContactRequestEvent.h"
#include "utils/qt/debug_extras.h"

namespace uniarchive2 { namespace intermediate_format { namespace events {

RawContactRequestEvent::RawContactRequestEvent(
    IMM(ApparentTime) timestamp,
    uint32_t index,
    TAKE(ApparentSubject) sender,
    TAKE(ApparentSubject) receiver,
    RawMessageContent&& message
) : RawEvent(timestamp, index), sender(move(sender)), receiver(move(receiver)), message(move(message)) {
    sanityCheckMandatoryParameters();
}

void RawContactRequestEvent::sanityCheckMandatoryParameters() const {
    invariant(sender, "Parameter 'sender' cannot have empty value");
    invariant(receiver, "Parameter 'receiver' cannot have empty value");
}

RawEventSubType RawContactRequestEvent::subType() const {
    return RawEventSubType::CONTACT_REQUEST;
}

void RawContactRequestEvent::serializeDetailsToStream(QDataStream& mut_stream) const {
    // TODO: add field serialization code
}

void RawContactRequestEvent::writeDetailsToDebugStream(QDebug stream) const {
    stream << " sender=" << sender << " receiver=" << receiver << " message=" << message;
}

}}}

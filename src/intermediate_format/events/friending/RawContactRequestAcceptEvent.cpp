/**
 * intermediate_format/events/friending/RawContactRequestAcceptEvent.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): a995287fe177578adcf374d6c44a5ed7bdfd83abea92074efa9e71aaa63078a2
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/events/friending/RawContactRequestAcceptEvent.h"

namespace uniarchive2 { namespace intermediate_format { namespace events {

RawContactRequestAcceptEvent::RawContactRequestAcceptEvent(
    IMM(ApparentTime) timestamp,
    uint32_t index,
    TAKE(ApparentSubject) acceptor,
    TAKE(ApparentSubject) acceptee
) : RawEvent(timestamp, index), acceptor(move(acceptor)), acceptee(move(acceptee)) {
    sanityCheckMandatoryParameters();
}

void RawContactRequestAcceptEvent::sanityCheckMandatoryParameters() const {
    invariant(acceptor, "Parameter 'acceptor' cannot have empty value");
    invariant(acceptee, "Parameter 'acceptee' cannot have empty value");
}

RawEventSubType RawContactRequestAcceptEvent::subType() const {
    return RawEventSubType::CONTACT_REQUEST_ACCEPT;
}

void RawContactRequestAcceptEvent::serializeDetailsToStream(QDataStream& mut_stream) const {
    // TODO: add field serialization code
}

void RawContactRequestAcceptEvent::writeDetailsToDebugStream(QDebug stream) const {
    stream << " acceptor=" << acceptor.get() << " acceptee=" << acceptee.get();
}

}}}

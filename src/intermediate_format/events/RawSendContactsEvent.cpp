/**
 * intermediate_format/events/RawSendContactsEvent.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): a6386897b90967f08a7a05cbceceb25bf117a35888dfc379804faf2ba8af1a7c
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/events/RawSendContactsEvent.h"
#include "utils/qt/debug_extras.h"
#include "utils/serialization/deserialization_helpers.h"
#include "utils/serialization/serialization_helpers.h"

namespace uniarchive2 { namespace intermediate_format { namespace events {

using namespace uniarchive2::utils::serialization;

RawSendContactsEvent::RawSendContactsEvent(
    IMM(ApparentTime) timestamp,
    uint32_t index,
    TAKE(ApparentSubject) sender,
    TAKE_VEC(ApparentSubject) contacts
) : RawEvent(timestamp, index), sender(move(sender)), contacts(move(contacts)) {
    sanityCheckMandatoryParameters();
}

void RawSendContactsEvent::sanityCheckMandatoryParameters() const {
    invariant(sender, "Parameter 'sender' cannot have empty value");
    for (IMM(auto) item : contacts) {
        invariant(item, "Parameter 'contacts' cannot have empty entries");
    }
}

RawEventSubType RawSendContactsEvent::subType() const {
    return RawEventSubType::SEND_CONTACTS;
}

bool RawSendContactsEvent::visitSubjectsImpl(IApparentSubjectVisitor& UNUSED visitor) {
    return true;
}

CEDE(RawSendContactsEvent) RawSendContactsEvent::deserializeFromStream(QDataStream& mut_stream, bool skip_type) {
    maybeDeserializeType(skip_type, mut_stream, RawEventSubType::SEND_CONTACTS);

    ApparentTime timestamp = must_deserialize(mut_stream, ApparentTime);
    uint32_t index = must_deserialize(mut_stream, uint32_t);
    optional<QByteArray> skype_guid = must_deserialize(mut_stream, optional<QByteArray>);
    unique_ptr<ApparentSubject> sender = must_deserialize(mut_stream, unique_ptr<ApparentSubject>);
    vector<unique_ptr<ApparentSubject>> contacts = must_deserialize(mut_stream, vector<unique_ptr<ApparentSubject>>);

    unique_ptr<RawSendContactsEvent> event = make_unique<RawSendContactsEvent>(
        timestamp,
        index,
        move(sender),
        move(contacts)
    );
    event->skypeGUID = skype_guid;

    return event;
}

void RawSendContactsEvent::serializeDetailsToStream(QDataStream& mut_stream) const {
    mut_stream << sender << contacts;
}

void RawSendContactsEvent::writeDetailsToDebugStream(QDebug stream) const {
    stream << " sender=" << sender << " contacts=" << contacts;
}

}}}

/**
 * intermediate_format/events/calls/RawAnswerCallEvent.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): e504f211945846e18fda538310f5ddb686d4e78b94634bcc7177a35a0edda938
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/events/calls/RawAnswerCallEvent.h"
#include "utils/qt/debug_extras.h"
#include "utils/serialization/deserialization_helpers.h"
#include "utils/serialization/serialization_helpers.h"

namespace uniarchive2 { namespace intermediate_format { namespace events {

using namespace uniarchive2::utils::serialization;

RawAnswerCallEvent::RawAnswerCallEvent(IMM(ApparentTime) timestamp, uint32_t index, TAKE(ApparentSubject) receiver)
  : RawEvent(timestamp, index), receiver(move(receiver)) {
    sanityCheckMandatoryParameters();
}

void RawAnswerCallEvent::sanityCheckMandatoryParameters() const {
    invariant(receiver, "Parameter 'receiver' cannot have empty value");
}

RawEventSubType RawAnswerCallEvent::subType() const {
    return RawEventSubType::ANSWER_CALL;
}

void RawAnswerCallEvent::visitSubjectsImpl(ApparentSubjectVisitor& UNUSED visitor) {
    // No fields to visit
}

CEDE(RawAnswerCallEvent) RawAnswerCallEvent::deserializeFromStream(QDataStream& mut_stream, bool skip_type) {
    maybeDeserializeType(skip_type, mut_stream, RawEventSubType::ANSWER_CALL);

    ApparentTime timestamp = must_deserialize(mut_stream, ApparentTime);
    uint32_t index = must_deserialize(mut_stream, uint32_t);
    optional<QByteArray> skype_guid = must_deserialize(mut_stream, optional<QByteArray>);
    unique_ptr<ApparentSubject> receiver = must_deserialize(mut_stream, unique_ptr<ApparentSubject>);
    unique_ptr<ApparentSubject> caller = must_deserialize_optional_unique_ptr(mut_stream, ApparentSubject);

    unique_ptr<RawAnswerCallEvent> event = make_unique<RawAnswerCallEvent>(timestamp, index, move(receiver));
    event->skypeGUID = skype_guid;
    event->caller = move(caller);

    return event;
}

void RawAnswerCallEvent::serializeDetailsToStream(QDataStream& mut_stream) const {
    mut_stream << receiver;
    serialize_optional_unique_ptr(mut_stream, caller);
}

void RawAnswerCallEvent::writeDetailsToDebugStream(QDebug stream) const {
    stream << " receiver=" << receiver;
    if (caller) {
        stream << " caller=" << caller;
    }
}

}}}

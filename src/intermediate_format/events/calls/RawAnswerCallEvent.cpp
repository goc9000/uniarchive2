/**
 * intermediate_format/events/calls/RawAnswerCallEvent.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): d979ed2f0bf37c66e4dd9480288e257c49af8023d3e1e426b54df44411a2c800
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/events/calls/RawAnswerCallEvent.h"

namespace uniarchive2 { namespace intermediate_format { namespace events {

RawAnswerCallEvent::RawAnswerCallEvent(IMM(ApparentTime) timestamp, uint index, TAKE(ApparentSubject) receiver)
  : RawEvent(timestamp, index), receiver(move(receiver)) {
    sanityCheckMandatoryParameters();
}

void RawAnswerCallEvent::sanityCheckMandatoryParameters() const {
    invariant(receiver, "Parameter 'receiver' cannot have empty value");
}

QString RawAnswerCallEvent::eventName() const {
    return "AnswerCall";
}

void RawAnswerCallEvent::writeDetailsToDebugStream(QDebug stream) const {
    stream << " receiver=" << receiver.get();
    if (caller) {
        stream << " caller=" << caller.get();
    }
}

}}}

/**
 * intermediate_format/events/calls/RawAnswerCallEvent.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): c59e2ec348a4aa8e1dd516f4f53b7f183c43ac0313be5e374d1e57603605155b
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/events/calls/RawAnswerCallEvent.h"
#include "utils/qt/debug_extras.h"
#include "utils/serialization/deserialization_helpers.h"
#include "utils/serialization/serialization_helpers.h"

namespace uniarchive2 { namespace intermediate_format { namespace events {

using namespace uniarchive2::utils::serialization;

RawAnswerCallEvent::RawAnswerCallEvent(IMM(ApparentTime) timestamp, uint32_t index, TAKE(ApparentSubject) receiver)
  : RawEvent(timestamp, index), receiver(move(receiver)) {
    sanityCheckMandatoryParameters();
}

void RawAnswerCallEvent::sanityCheckMandatoryParameters() const {
    invariant(receiver, "Parameter 'receiver' cannot have empty value");
}

RawEventSubType RawAnswerCallEvent::subType() const {
    return RawEventSubType::ANSWER_CALL;
}

CEDE(RawAnswerCallEvent) RawAnswerCallEvent::deserializeFromStream(QDataStream& mut_stream, bool skip_type) {
    invariant_violation("RawAnswerCallEvent deserialization not yet implemented");
}

void RawAnswerCallEvent::serializeDetailsToStream(QDataStream& mut_stream) const {
    mut_stream << receiver;
    serialize_optional_unique_ptr(mut_stream, caller);
}

void RawAnswerCallEvent::writeDetailsToDebugStream(QDebug stream) const {
    stream << " receiver=" << receiver;
    if (caller) {
        stream << " caller=" << caller;
    }
}

}}}

/**
 * intermediate_format/events/calls/RawAnswerCallEvent.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): 431afad46ff9be6b828d5eb5ccc5d8e5d6c8a87978ba6c74c2d9634a920ce063
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/events/calls/RawAnswerCallEvent.h"

namespace uniarchive2 { namespace intermediate_format { namespace events {

RawAnswerCallEvent::RawAnswerCallEvent(IMM(ApparentTime) timestamp, uint index, TAKE(ApparentSubject) receiver)
  : RawEvent(timestamp, index), receiver(move(receiver)) {
    sanityCheckMandatoryParameters();
}

void RawAnswerCallEvent::sanityCheckMandatoryParameters() const {
    invariant(receiver, "Parameter 'receiver' cannot have empty value");
}

RawEventSubType RawAnswerCallEvent::subType() const {
    return RawEventSubType::ANSWER_CALL;
}

void RawAnswerCallEvent::serializeDetailsToStream(QDataStream& mut_stream) const {
    // TODO: add field serialization code
}

void RawAnswerCallEvent::writeDetailsToDebugStream(QDebug stream) const {
    stream << " receiver=" << receiver.get();
    if (caller) {
        stream << " caller=" << caller.get();
    }
}

}}}

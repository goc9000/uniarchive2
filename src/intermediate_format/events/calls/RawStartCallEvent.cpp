/**
 * intermediate_format/events/calls/RawStartCallEvent.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): ac3616e63620e08510e5652775aee5fde8840b37e6f2f6b074c97844de5519e3
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/events/calls/RawStartCallEvent.h"
#include "intermediate_format/subjects/visitor/visit_subject_utils.h"
#include "utils/qt/debug_extras.h"
#include "utils/serialization/deserialization_helpers.h"
#include "utils/serialization/serialization_helpers.h"

namespace uniarchive2 { namespace intermediate_format { namespace events {

using namespace uniarchive2::utils::serialization;

RawStartCallEvent::RawStartCallEvent(
    IMM(ApparentTime) timestamp,
    uint32_t index,
    TAKE(ApparentSubject) initiator,
    TAKE_VEC(ApparentSubject) peers
) : RawFailableEvent(timestamp, index), initiator(move(initiator)), peers(move(peers)) {
    sanityCheckMandatoryParameters();
}

RawStartCallEvent::RawStartCallEvent(
    IMM(ApparentTime) timestamp,
    uint32_t index,
    TAKE(ApparentSubject) initiator,
    TAKE(ApparentSubject) peer
) : RawFailableEvent(timestamp, index), initiator(move(initiator)) {
    peers.push_back(move(peer));
    sanityCheckMandatoryParameters();
}

void RawStartCallEvent::sanityCheckMandatoryParameters() const {
    invariant(initiator, "Parameter 'initiator' cannot have empty value");
    for (IMM(auto) item : peers) {
        invariant(item, "Parameter 'peers' cannot have empty entries");
    }
}

RawEventSubType RawStartCallEvent::subType() const {
    return RawEventSubType::START_CALL;
}

bool RawStartCallEvent::visitSubjectsImpl(IMM(visit_subjects_callback_t) callback) const {
    return visit_subjects(initiator, callback) && visit_subjects(peers, callback);
}

bool RawStartCallEvent::alterSubjectsImpl(IMM(alter_subjects_callback_t) callback) {
    return alter_subjects(initiator, callback) && alter_subjects(peers, callback);
}

CEDE(RawStartCallEvent) RawStartCallEvent::deserializeFromStream(QDataStream& mut_stream, bool skip_type) {
    maybeDeserializeType(skip_type, mut_stream, RawEventSubType::START_CALL);

    ApparentTime timestamp = must_deserialize(mut_stream, ApparentTime);
    uint32_t index = must_deserialize(mut_stream, uint32_t);
    optional<QByteArray> skype_guid = must_deserialize(mut_stream, optional<QByteArray>);
    optional<StartCallFailReason> fail_reason = must_deserialize(mut_stream, optional<StartCallFailReason>);
    unique_ptr<ApparentSubject> initiator = must_deserialize(mut_stream, unique_ptr<ApparentSubject>);
    vector<unique_ptr<ApparentSubject>> peers = must_deserialize(mut_stream, vector<unique_ptr<ApparentSubject>>);
    optional<uint16_t> duration_seconds = must_deserialize(mut_stream, optional<uint16_t>);
    optional<QString> skype_call_guid = must_deserialize(mut_stream, optional<QString>);
    optional<QString> synthetic_call_guid = must_deserialize(mut_stream, optional<QString>);
    optional<uint64_t> corresponding_skype_call_id = must_deserialize(mut_stream, optional<uint64_t>);

    unique_ptr<RawStartCallEvent> event = make_unique<RawStartCallEvent>(
        timestamp,
        index,
        move(initiator),
        move(peers)
    );
    event->reasonFailed = fail_reason;
    event->skypeGUID = skype_guid;
    event->durationSeconds = duration_seconds;
    event->skypeCallGUID = skype_call_guid;
    event->syntheticCallGUID = synthetic_call_guid;
    event->correspondingSkypeCallID = corresponding_skype_call_id;

    return event;
}

void RawStartCallEvent::serializeFailableEventDetailsToStream(QDataStream& mut_stream) const {
    mut_stream << initiator << peers << durationSeconds << skypeCallGUID << syntheticCallGUID;
    mut_stream << correspondingSkypeCallID;
}

void RawStartCallEvent::writeFailableEventDetailsToDebugStream(QDebug stream) const {
    stream << " initiator=" << initiator;
    if (peers.size() == 1) {
        stream << " peer=" << peers.front();
    } else {
        stream << " peers=" << peers;
    }
    if (durationSeconds) {
        stream << " duration_seconds=" << durationSeconds;
    }
    if (skypeCallGUID) {
        stream << " skype_call_guid=" << skypeCallGUID;
    }
    if (syntheticCallGUID) {
        stream << " synthetic_call_guid=" << syntheticCallGUID;
    }
    if (correspondingSkypeCallID) {
        stream << " corresponding_skype_call_id=" << correspondingSkypeCallID;
    }
}

}}}

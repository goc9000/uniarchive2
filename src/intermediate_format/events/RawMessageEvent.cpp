/**
 * intermediate_format/events/RawMessageEvent.cpp
 *
 * WARNING: This file is partially autogenerated. Edit only the custom sections, or autogen_config.yml and re-generate.
 * Codegen hash (sha256): 582ea2f8700ec888d4190b81dcd846b99ffae87b4371bfb5e50c06799de3db1c
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/events/RawMessageEvent.h"
#include "utils/serialization/deserialization_helpers.h"
#include "utils/serialization/serialization_helpers.h"

namespace uniarchive2 { namespace intermediate_format { namespace events {

using namespace uniarchive2::utils::serialization;

RawMessageEvent::RawMessageEvent(
    IMM(ApparentTime) timestamp,
    uint32_t index,
    TAKE(ApparentSubject) sender,
    RawMessageContent&& content
) : RawFailableEvent(timestamp, index), sender(move(sender)), content(move(content)) {
    sanityCheckMandatoryParameters();
}

void RawMessageEvent::sanityCheckMandatoryParameters() const {
    invariant(sender, "Parameter 'sender' cannot have empty value");
}

RawEventSubType RawMessageEvent::subType() const {
    return RawEventSubType::MESSAGE;
}

void RawMessageEvent::visitSubjectsImpl(ApparentSubjectVisitor& UNUSED visitor) {
    // No fields to visit
}

CEDE(RawMessageEvent) RawMessageEvent::deserializeFromStream(QDataStream& mut_stream, bool skip_type) {
    maybeDeserializeType(skip_type, mut_stream, RawEventSubType::MESSAGE);

    ApparentTime timestamp = must_deserialize(mut_stream, ApparentTime);
    uint32_t index = must_deserialize(mut_stream, uint32_t);
    optional<QByteArray> skype_guid = must_deserialize(mut_stream, optional<QByteArray>);
    optional<SendMessageFailReason> fail_reason = must_deserialize(mut_stream, optional<SendMessageFailReason>);
    unique_ptr<ApparentSubject> sender = must_deserialize(mut_stream, unique_ptr<ApparentSubject>);
    unique_ptr<ApparentSubject> receiver = must_deserialize_optional_unique_ptr(mut_stream, ApparentSubject);
    RawMessageContent content = must_deserialize(mut_stream, RawMessageContent);
    bool is_offline = must_deserialize(mut_stream, bool);
    bool is_action = must_deserialize(mut_stream, bool);
    bool is_edited = must_deserialize(mut_stream, bool);
    unique_ptr<ApparentSubject> edited_by = must_deserialize_optional_unique_ptr(mut_stream, ApparentSubject);
    optional<ApparentTime> time_edited = must_deserialize(mut_stream, optional<ApparentTime>);

    unique_ptr<RawMessageEvent> event = make_unique<RawMessageEvent>(timestamp, index, move(sender), move(content));
    event->reasonFailed = fail_reason;
    event->skypeGUID = skype_guid;
    event->receiver = move(receiver);
    event->isOffline = is_offline;
    event->isAction = is_action;
    event->isEdited = is_edited;
    event->editedBy = move(edited_by);
    event->timeEdited = time_edited;

    return event;
}

void RawMessageEvent::serializeFailableEventDetailsToStream(QDataStream& mut_stream) const {
    mut_stream << sender;
    serialize_optional_unique_ptr(mut_stream, receiver);
    mut_stream << content << isOffline << isAction << isEdited;
    serialize_optional_unique_ptr(mut_stream, editedBy);
    mut_stream << timeEdited;
}

void RawMessageEvent::writeFailableEventDetailsToDebugStream(QDebug stream) const {
    // BEGIN CUSTOM SECTION: Debug write method
    if (isOffline) {
        stream << " OFFLINE";
    }
    if (isEdited) {
        stream << " EDITED";
        if (editedBy || timeEdited) {
            stream << "(";
            if (editedBy) {
                stream << "edited_by=" << editedBy.get();
            }
            if (timeEdited) {
                stream << (editedBy ? " " : "") << "time_edited=" << *timeEdited;
            }
            stream << ")";
        }
    }
    if (isAction) {
        stream << " ACTION";
    }
    stream << " sender=" << sender.get();
    if (receiver) {
        stream << " receiver=" << receiver.get();
    }
    stream << " content=" << content;
    // END CUSTOM SECTION: Debug write method
}

}}}

/**
 * intermediate_format/events/file_transfer/RawOfferFileGroupEvent.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): 526c98a16c8f0612ada6f12dc5248476e0ea04a13f569eecd4564336e7b2cc91
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/events/file_transfer/RawOfferFileGroupEvent.h"
#include "intermediate_format/subjects/visitor/visit_subject_utils.h"
#include "utils/qt/debug_extras.h"
#include "utils/serialization/deserialization_helpers.h"
#include "utils/serialization/serialization_helpers.h"

namespace uniarchive2 { namespace intermediate_format { namespace events {

using namespace uniarchive2::utils::serialization;

RawOfferFileGroupEvent::RawOfferFileGroupEvent(
    IMM(ApparentTime) timestamp,
    uint32_t index,
    TAKE(ApparentSubject) sender,
    uint16_t num_files
) : RawEvent(timestamp, index), sender(move(sender)), numFiles(num_files) {
    sanityCheckMandatoryParameters();
}

void RawOfferFileGroupEvent::sanityCheckMandatoryParameters() const {
    invariant(sender, "Parameter 'sender' cannot have empty value");
}

RawEventSubType RawOfferFileGroupEvent::subType() const {
    return RawEventSubType::OFFER_FILE_GROUP;
}

bool RawOfferFileGroupEvent::visitSubjectsImpl(IMM(visit_subjects_callback_t) callback) const {
    return visit_subjects(sender, callback) && visit_subjects(recipient, callback);
}

bool RawOfferFileGroupEvent::alterSubjectsImpl(IMM(alter_subjects_callback_t) callback) {
    return alter_subjects(sender, callback) && alter_subjects(recipient, callback);
}

CEDE(RawOfferFileGroupEvent) RawOfferFileGroupEvent::deserializeFromStream(QDataStream& mut_stream, bool skip_type) {
    maybeDeserializeType(skip_type, mut_stream, RawEventSubType::OFFER_FILE_GROUP);

    ApparentTime timestamp = must_deserialize(mut_stream, ApparentTime);
    uint32_t index = must_deserialize(mut_stream, uint32_t);
    optional<QByteArray> skype_guid = must_deserialize(mut_stream, optional<QByteArray>);
    unique_ptr<ApparentSubject> sender = must_deserialize(mut_stream, unique_ptr<ApparentSubject>);
    unique_ptr<ApparentSubject> recipient = must_deserialize_optional_unique_ptr(mut_stream, ApparentSubject);
    uint16_t num_files = must_deserialize(mut_stream, uint16_t);

    unique_ptr<RawOfferFileGroupEvent> event = make_unique<RawOfferFileGroupEvent>(
        timestamp,
        index,
        move(sender),
        num_files
    );
    event->skypeGUID = skype_guid;
    event->recipient = move(recipient);

    return event;
}

void RawOfferFileGroupEvent::serializeDetailsToStream(QDataStream& mut_stream) const {
    mut_stream << sender;
    serialize_optional_unique_ptr(mut_stream, recipient);
    mut_stream << numFiles;
}

void RawOfferFileGroupEvent::writeDetailsToDebugStream(QDebug stream) const {
    stream << " sender=" << sender;
    if (recipient) {
        stream << " recipient=" << recipient;
    }
    stream << " num_files=" << numFiles;
}

}}}

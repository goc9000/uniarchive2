/**
 * intermediate_format/events/file_transfer/RawCancelFileTransferEvent.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): b79d481bab6dc8c85e07f8cc7e0934cd1124cebc3941196d7fae7ea4cabb1b36
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/events/file_transfer/RawCancelFileTransferEvent.h"
#include "utils/qt/debug_extras.h"
#include "utils/serialization/deserialization_helpers.h"
#include "utils/serialization/serialization_helpers.h"

namespace uniarchive2 { namespace intermediate_format { namespace events {

using namespace uniarchive2::utils::serialization;

RawCancelFileTransferEvent::RawCancelFileTransferEvent(IMM(ApparentTime) timestamp, uint32_t index)
  : RawEvent(timestamp, index) {
    // Nothing else to initialize
}

RawCancelFileTransferEvent::RawCancelFileTransferEvent(
    IMM(ApparentTime) timestamp,
    uint32_t index,
    IMM(RawTransferredFile) file
) : RawEvent(timestamp, index), file(file) {
    // Nothing else to initialize
}

RawEventSubType RawCancelFileTransferEvent::subType() const {
    return RawEventSubType::CANCEL_FILE_TRANSFER;
}

bool RawCancelFileTransferEvent::visitSubjectsImpl(IApparentSubjectVisitor& UNUSED visitor) {
    return true;
}

CEDE(RawCancelFileTransferEvent) RawCancelFileTransferEvent::deserializeFromStream(
    QDataStream& mut_stream,
    bool skip_type
) {
    maybeDeserializeType(skip_type, mut_stream, RawEventSubType::CANCEL_FILE_TRANSFER);

    ApparentTime timestamp = must_deserialize(mut_stream, ApparentTime);
    uint32_t index = must_deserialize(mut_stream, uint32_t);
    optional<QByteArray> skype_guid = must_deserialize(mut_stream, optional<QByteArray>);
    optional<RawTransferredFile> file = must_deserialize(mut_stream, optional<RawTransferredFile>);
    unique_ptr<ApparentSubject> actor = must_deserialize_optional_unique_ptr(mut_stream, ApparentSubject);

    unique_ptr<RawCancelFileTransferEvent> event = make_unique<RawCancelFileTransferEvent>(timestamp, index);
    event->skypeGUID = skype_guid;
    event->file = file;
    event->actor = move(actor);

    return event;
}

void RawCancelFileTransferEvent::serializeDetailsToStream(QDataStream& mut_stream) const {
    mut_stream << file;
    serialize_optional_unique_ptr(mut_stream, actor);
}

void RawCancelFileTransferEvent::writeDetailsToDebugStream(QDebug stream) const {
    if (file) {
        stream << " file=" << file;
    }
    if (actor) {
        stream << " actor=" << actor;
    }
}

}}}

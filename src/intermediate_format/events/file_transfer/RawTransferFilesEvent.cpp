/**
 * intermediate_format/events/file_transfer/RawTransferFilesEvent.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): d8336ca9a646c42866f85cf2a64663d3d987e0579b4a87fe6dbbbcfe71a33cf6
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/events/file_transfer/RawTransferFilesEvent.h"
#include "utils/qt/debug_extras.h"
#include "utils/serialization/deserialization_helpers.h"
#include "utils/serialization/serialization_helpers.h"

namespace uniarchive2 { namespace intermediate_format { namespace events {

using namespace uniarchive2::utils::serialization;

RawTransferFilesEvent::RawTransferFilesEvent(
    IMM(ApparentTime) timestamp,
    uint32_t index,
    TAKE(ApparentSubject) sender,
    IMM(vector<RawTransferredFile>) files
) : RawEvent(timestamp, index), sender(move(sender)), files(files) {
    sanityCheckMandatoryParameters();
}

RawTransferFilesEvent::RawTransferFilesEvent(
    IMM(ApparentTime) timestamp,
    uint32_t index,
    TAKE(ApparentSubject) sender,
    IMM(RawTransferredFile) file
) : RawEvent(timestamp, index), sender(move(sender)) {
    files.push_back(file);
    sanityCheckMandatoryParameters();
}

void RawTransferFilesEvent::sanityCheckMandatoryParameters() const {
    invariant(sender, "Parameter 'sender' cannot have empty value");
}

RawEventSubType RawTransferFilesEvent::subType() const {
    return RawEventSubType::TRANSFER_FILES;
}

CEDE(RawTransferFilesEvent) RawTransferFilesEvent::deserializeFromStream(QDataStream& mut_stream, bool skip_type) {
    invariant_violation("RawTransferFilesEvent deserialization not yet implemented");
}

void RawTransferFilesEvent::serializeDetailsToStream(QDataStream& mut_stream) const {
    mut_stream << sender;
    serialize_optional_unique_ptr(mut_stream, recipient);
    mut_stream << files;
}

void RawTransferFilesEvent::writeDetailsToDebugStream(QDebug stream) const {
    stream << " sender=" << sender;
    if (recipient) {
        stream << " recipient=" << recipient;
    }
    if (files.size() == 1) {
        stream << " file=" << files.front();
    } else {
        stream << " files=" << files;
    }
}

}}}

/**
 * intermediate_format/events/file_transfer/RawTransferFilesEvent.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): 2d77dffcc270fafbecb25766bf1620a0234e11d3c9d226bdc9645d57738507cd
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/events/file_transfer/RawTransferFilesEvent.h"
#include "intermediate_format/subjects/visitor/visit_subject_utils.h"
#include "utils/qt/debug_extras.h"
#include "utils/serialization/deserialization_helpers.h"
#include "utils/serialization/serialization_helpers.h"

namespace uniarchive2 { namespace intermediate_format { namespace events {

using namespace uniarchive2::utils::serialization;

RawTransferFilesEvent::RawTransferFilesEvent(
    IMM(ApparentTime) timestamp,
    uint32_t index,
    TAKE(ApparentSubject) sender,
    IMM(vector<RawTransferredFile>) files
) : RawEvent(timestamp, index), sender(move(sender)), files(files) {
    sanityCheckMandatoryParameters();
}

RawTransferFilesEvent::RawTransferFilesEvent(
    IMM(ApparentTime) timestamp,
    uint32_t index,
    TAKE(ApparentSubject) sender,
    IMM(RawTransferredFile) file
) : RawEvent(timestamp, index), sender(move(sender)) {
    files.push_back(file);
    sanityCheckMandatoryParameters();
}

void RawTransferFilesEvent::sanityCheckMandatoryParameters() const {
    invariant(sender, "Parameter 'sender' cannot have empty value");
}

RawEventSubType RawTransferFilesEvent::subType() const {
    return RawEventSubType::TRANSFER_FILES;
}

bool RawTransferFilesEvent::visitSubjectsImpl(IApparentSubjectVisitor& visitor) {
    return visit_subjects(sender, visitor) && visit_subjects(recipient, visitor);
}

CEDE(RawTransferFilesEvent) RawTransferFilesEvent::deserializeFromStream(QDataStream& mut_stream, bool skip_type) {
    maybeDeserializeType(skip_type, mut_stream, RawEventSubType::TRANSFER_FILES);

    ApparentTime timestamp = must_deserialize(mut_stream, ApparentTime);
    uint32_t index = must_deserialize(mut_stream, uint32_t);
    optional<QByteArray> skype_guid = must_deserialize(mut_stream, optional<QByteArray>);
    unique_ptr<ApparentSubject> sender = must_deserialize(mut_stream, unique_ptr<ApparentSubject>);
    unique_ptr<ApparentSubject> recipient = must_deserialize_optional_unique_ptr(mut_stream, ApparentSubject);
    vector<RawTransferredFile> files = must_deserialize(mut_stream, vector<RawTransferredFile>);

    unique_ptr<RawTransferFilesEvent> event = make_unique<RawTransferFilesEvent>(timestamp, index, move(sender), files);
    event->skypeGUID = skype_guid;
    event->recipient = move(recipient);

    return event;
}

void RawTransferFilesEvent::serializeDetailsToStream(QDataStream& mut_stream) const {
    mut_stream << sender;
    serialize_optional_unique_ptr(mut_stream, recipient);
    mut_stream << files;
}

void RawTransferFilesEvent::writeDetailsToDebugStream(QDebug stream) const {
    stream << " sender=" << sender;
    if (recipient) {
        stream << " recipient=" << recipient;
    }
    if (files.size() == 1) {
        stream << " file=" << files.front();
    } else {
        stream << " files=" << files;
    }
}

}}}

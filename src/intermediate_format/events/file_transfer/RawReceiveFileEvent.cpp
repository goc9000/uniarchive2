/**
 * intermediate_format/events/file_transfer/RawReceiveFileEvent.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): 7fc6d0c2b03f2876caede817f77bc2f198bac635f254862159f06623d77cf7b4
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/events/file_transfer/RawReceiveFileEvent.h"
#include "utils/qt/debug_extras.h"
#include "utils/serialization/deserialization_helpers.h"
#include "utils/serialization/serialization_helpers.h"

namespace uniarchive2 { namespace intermediate_format { namespace events {

using namespace uniarchive2::utils::serialization;

RawReceiveFileEvent::RawReceiveFileEvent(
    IMM(ApparentTime) timestamp,
    uint32_t index,
    TAKE(ApparentSubject) receiver,
    IMM(RawTransferredFile) file
) : RawEvent(timestamp, index), receiver(move(receiver)), file(file) {
    sanityCheckMandatoryParameters();
}

void RawReceiveFileEvent::sanityCheckMandatoryParameters() const {
    invariant(receiver, "Parameter 'receiver' cannot have empty value");
}

RawEventSubType RawReceiveFileEvent::subType() const {
    return RawEventSubType::RECEIVE_FILE;
}

CEDE(RawReceiveFileEvent) RawReceiveFileEvent::deserializeFromStream(QDataStream& mut_stream, bool skip_type) {
    invariant_violation("RawReceiveFileEvent deserialization not yet implemented");
}

void RawReceiveFileEvent::serializeDetailsToStream(QDataStream& mut_stream) const {
    mut_stream << receiver;
    serialize_optional_unique_ptr(mut_stream, sender);
    mut_stream << file;
}

void RawReceiveFileEvent::writeDetailsToDebugStream(QDebug stream) const {
    stream << " receiver=" << receiver;
    if (sender) {
        stream << " sender=" << sender;
    }
    stream << " file=" << file;
}

}}}

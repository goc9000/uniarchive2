/**
 * intermediate_format/events/conversation/RawStartConversationEvent.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): 1c298646700b5c8a5590821da97cd6c91f621404db208d31ead6a72221aef76b
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/events/conversation/RawStartConversationEvent.h"
#include "utils/qt/debug_extras.h"
#include "utils/serialization/deserialization_helpers.h"
#include "utils/serialization/serialization_helpers.h"

namespace uniarchive2 { namespace intermediate_format { namespace events {

using namespace uniarchive2::utils::serialization;

RawStartConversationEvent::RawStartConversationEvent(IMM(ApparentTime) timestamp, uint32_t index)
  : RawEvent(timestamp, index) {
}

RawStartConversationEvent::RawStartConversationEvent(
    IMM(ApparentTime) timestamp,
    uint32_t index,
    TAKE(ApparentSubject) initiator
) : RawEvent(timestamp, index), initiator(move(initiator)) {
    invariant(this->initiator, "Parameter 'initiator' cannot have empty value");
}

RawStartConversationEvent::RawStartConversationEvent(
    IMM(ApparentTime) timestamp,
    uint32_t index,
    TAKE(ApparentSubject) initiator,
    TAKE(ApparentSubject) peer
) : RawEvent(timestamp, index), initiator(move(initiator)), peer(move(peer)) {
    invariant(this->initiator, "Parameter 'initiator' cannot have empty value");
    invariant(this->peer, "Parameter 'peer' cannot have empty value");
}

RawEventSubType RawStartConversationEvent::subType() const {
    return RawEventSubType::START_CONVERSATION;
}

CEDE(RawStartConversationEvent) RawStartConversationEvent::deserializeFromStream(
    QDataStream& mut_stream,
    bool skip_type
) {
    invariant_violation("RawStartConversationEvent deserialization not yet implemented");
}

void RawStartConversationEvent::serializeDetailsToStream(QDataStream& mut_stream) const {
    serialize_optional_unique_ptr(mut_stream, initiator);
    serialize_optional_unique_ptr(mut_stream, peer);
}

void RawStartConversationEvent::writeDetailsToDebugStream(QDebug stream) const {
    if (initiator) {
        stream << " initiator=" << initiator;
    }
    if (peer) {
        stream << " peer=" << peer;
    }
}

}}}

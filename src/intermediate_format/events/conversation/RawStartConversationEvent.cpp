/**
 * intermediate_format/events/conversation/RawStartConversationEvent.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): 74cfc3568aeecb2a558f7c1bc66aabad089dd58949eabe7aacedb8ff4a280c4d
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/events/conversation/RawStartConversationEvent.h"

namespace uniarchive2 { namespace intermediate_format { namespace events {

RawStartConversationEvent::RawStartConversationEvent(IMM(ApparentTime) timestamp, uint index)
  : RawEvent(timestamp, index) {
}

RawStartConversationEvent::RawStartConversationEvent(
    IMM(ApparentTime) timestamp,
    uint index,
    TAKE(ApparentSubject) initiator
) : RawEvent(timestamp, index), initiator(move(initiator)) {
    invariant(this->initiator, "Parameter 'initiator' cannot have empty value");
}

RawStartConversationEvent::RawStartConversationEvent(
    IMM(ApparentTime) timestamp,
    uint index,
    TAKE(ApparentSubject) initiator,
    TAKE(ApparentSubject) peer
) : RawEvent(timestamp, index), initiator(move(initiator)), peer(move(peer)) {
    invariant(this->initiator, "Parameter 'initiator' cannot have empty value");
    invariant(this->peer, "Parameter 'peer' cannot have empty value");
}

QString RawStartConversationEvent::eventName() const {
    return "StartConversation";
}

void RawStartConversationEvent::writeDetailsToDebugStream(QDebug stream) const {
    if (initiator) {
        stream << " initiator=" << initiator.get();
    }
    if (peer) {
        stream << " peer=" << peer.get();
    }
}

}}}

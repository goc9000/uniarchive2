/**
 * intermediate_format/errors/CurrentCallFailReason.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): 3dc5461f751ae82f232b9e4ba03522c5b8393b0d09f62aece329debf66f47f29
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/errors/CurrentCallFailReason.h"
#include "utils/qt/shortcuts.h"
#include "utils/serialization/deserialization_helpers.h"

#include <QMap>
#include <QtDebug>

namespace uniarchive2 { namespace intermediate_format { namespace errors {

using namespace uniarchive2::utils::serialization;

QString name_for_current_call_fail_reason(CurrentCallFailReason reason) {
    switch (reason) {
        case CurrentCallFailReason::UNDETERMINED:
            return "undetermined";
        case CurrentCallFailReason::CONNECTION_DROPPED:
            return "connection dropped";
    }

    invariant_violation("Invalid CurrentCallFailReason value (%lld)", (int64_t)reason);
}

QString symbol_for_current_call_fail_reason(CurrentCallFailReason reason) {
    switch (reason) {
        case CurrentCallFailReason::UNDETERMINED:
            return "undetermined";
        case CurrentCallFailReason::CONNECTION_DROPPED:
            return "connection_dropped";
    }

    invariant_violation("Invalid CurrentCallFailReason value (%lld)", (int64_t)reason);
}

CurrentCallFailReason current_call_fail_reason_from_symbol(IMM(QString) symbol) {
    const static QMap<QString, CurrentCallFailReason> MAP = {
        { "undetermined",       CurrentCallFailReason::UNDETERMINED },
        { "connection_dropped", CurrentCallFailReason::CONNECTION_DROPPED },
    };

    if (MAP.contains(symbol)) {
        return MAP[symbol];
    }

    invariant_violation("Invalid CurrentCallFailReason symbol ('%s')", QP(symbol));
}

QDebug operator<< (QDebug stream, CurrentCallFailReason reason) {
    stream << QP(name_for_current_call_fail_reason(reason));

    return stream;
}

QDataStream& operator>> (QDataStream& mut_stream, CurrentCallFailReason& mut_reason) {
    uint8_t code = must_deserialize(mut_stream, uint8_t);

    switch ((CurrentCallFailReason)code) {
        case CurrentCallFailReason::UNDETERMINED:
        case CurrentCallFailReason::CONNECTION_DROPPED:
            mut_reason = (CurrentCallFailReason)code;
            break;
        default:
            invariant_violation("Invalid deserialized CurrentCallFailReason value (%lld)", (int64_t)code);
    }

    return mut_stream;
}

QDataStream& operator<< (QDataStream& mut_stream, CurrentCallFailReason reason) {
    mut_stream << (uint8_t)reason;

    return mut_stream;
}

}}}

/**
 * intermediate_format/errors/StartCallFailReason.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): d8a4e19a017f894b1f85b5cae4d712fc50414d6969f58df3267eaabf1e668da4
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/errors/StartCallFailReason.h"
#include "utils/qt/shortcuts.h"
#include "utils/serialization/deserialization_helpers.h"

#include <QtDebug>

namespace uniarchive2 { namespace intermediate_format { namespace errors {

using namespace uniarchive2::utils::serialization;

QString name_for_start_call_fail_reason(StartCallFailReason reason) {
    switch (reason) {
        case StartCallFailReason::UNDETERMINED:
            return "undetermined";
        case StartCallFailReason::NO_ANSWER:
            return "no answer";
        case StartCallFailReason::PEER_BUSY:
            return "peer busy";
        case StartCallFailReason::PRIVACY_BLOCKED:
            return "blocked by privacy settings";
        case StartCallFailReason::CALL_REJECTED:
            return "call rejected";
    }

    invariant_violation("Invalid StartCallFailReason value (%lld)", (int64_t)reason);
}

QDebug operator<< (QDebug stream, StartCallFailReason reason) {
    stream << QP(name_for_start_call_fail_reason(reason));

    return stream;
}

QDataStream& operator>> (QDataStream& mut_stream, StartCallFailReason& mut_reason) {
    uint8_t code = must_deserialize(mut_stream, uint8_t);

    switch ((StartCallFailReason)code) {
        case StartCallFailReason::UNDETERMINED:
        case StartCallFailReason::NO_ANSWER:
        case StartCallFailReason::PEER_BUSY:
        case StartCallFailReason::PRIVACY_BLOCKED:
        case StartCallFailReason::CALL_REJECTED:
            mut_reason = (StartCallFailReason)code;
            break;
        default:
            invariant_violation("Invalid deserialized StartCallFailReason value (%lld)", (int64_t)code);
    }

    return mut_stream;
}

QDataStream& operator<< (QDataStream& mut_stream, StartCallFailReason reason) {
    mut_stream << (uint8_t)reason;

    return mut_stream;
}

}}}

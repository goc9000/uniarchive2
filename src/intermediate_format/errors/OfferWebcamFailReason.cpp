/**
 * intermediate_format/errors/OfferWebcamFailReason.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): a7b26738c99462ec7a39c50c99ca8b3778dea39d5bc95e8338cee03efadfbb96
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "intermediate_format/errors/OfferWebcamFailReason.h"
#include "utils/qt/shortcuts.h"
#include "utils/serialization/deserialization_helpers.h"

#include <QMap>
#include <QtDebug>

namespace uniarchive2 { namespace intermediate_format { namespace errors {

using namespace uniarchive2::utils::serialization;

QString name_for_offer_webcam_fail_reason(OfferWebcamFailReason reason) {
    switch (reason) {
        case OfferWebcamFailReason::UNDETERMINED:
            return "undetermined";
        case OfferWebcamFailReason::UNSUPPORTED:
            return "unsupported";
    }

    invariant_violation("Invalid OfferWebcamFailReason value (%lld)", (int64_t)reason);
}

QString symbol_for_offer_webcam_fail_reason(OfferWebcamFailReason reason) {
    switch (reason) {
        case OfferWebcamFailReason::UNDETERMINED:
            return "undetermined";
        case OfferWebcamFailReason::UNSUPPORTED:
            return "unsupported";
    }

    invariant_violation("Invalid OfferWebcamFailReason value (%lld)", (int64_t)reason);
}

OfferWebcamFailReason offer_webcam_fail_reason_from_symbol(IMM(QString) symbol) {
    const static QMap<QString, OfferWebcamFailReason> MAP = {
        { "undetermined", OfferWebcamFailReason::UNDETERMINED },
        { "unsupported",  OfferWebcamFailReason::UNSUPPORTED },
    };

    if (MAP.contains(symbol)) {
        return MAP[symbol];
    }

    invariant_violation("Invalid OfferWebcamFailReason symbol ('%s')", QP(symbol));
}

QDebug operator<< (QDebug stream, OfferWebcamFailReason reason) {
    stream << QP(name_for_offer_webcam_fail_reason(reason));

    return stream;
}

QDataStream& operator>> (QDataStream& mut_stream, OfferWebcamFailReason& mut_reason) {
    uint8_t code = must_deserialize(mut_stream, uint8_t);

    switch ((OfferWebcamFailReason)code) {
        case OfferWebcamFailReason::UNDETERMINED:
        case OfferWebcamFailReason::UNSUPPORTED:
            mut_reason = (OfferWebcamFailReason)code;
            break;
        default:
            invariant_violation("Invalid deserialized OfferWebcamFailReason value (%lld)", (int64_t)code);
    }

    return mut_stream;
}

QDataStream& operator<< (QDataStream& mut_stream, OfferWebcamFailReason reason) {
    mut_stream << (uint8_t)reason;

    return mut_stream;
}

}}}

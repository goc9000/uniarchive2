/**
 * protocols/IMProtocol.cpp
 *
 * WARNING: This file is autogenerated. To make changes, edit autogen_config.yml instead and re-generate.
 * Codegen hash (sha256): b0f9611cfc0b6fd1c15d6167f0d56577be41c918042fb7be68837a51b876633b
 *
 * (C) Copyright 2014-present  Cristian Dinu <goc9000@gmail.com>
 *
 * This file is part of UniArchive II.
 *
 * Licensed under the GPL-3
 */

#include "protocols/IMProtocol.h"
#include "utils/qt/shortcuts.h"
#include "utils/serialization/deserialization_helpers.h"

#include <QMap>
#include <QtDebug>

namespace uniarchive2 { namespace protocols {

using namespace uniarchive2::utils::serialization;

QString name_for_im_protocol(IMProtocol protocol) {
    switch (protocol) {
        case IMProtocol::INVALID:
            return "(invalid)";
        case IMProtocol::DIGSBY:
            return "Digsby";
        case IMProtocol::FACEBOOK:
            return "Facebook";
        case IMProtocol::JABBER:
            return "Jabber";
        case IMProtocol::MSN:
            return "MSN";
        case IMProtocol::SKYPE:
            return "Skype";
        case IMProtocol::WHATSAPP:
            return "WhatsApp";
        case IMProtocol::YAHOO:
            return "Yahoo";
    }

    invariant_violation("Invalid IMProtocol value (%lld)", (int64_t)protocol);
}

QString symbol_for_im_protocol(IMProtocol protocol) {
    switch (protocol) {
        case IMProtocol::INVALID:
            return "invalid";
        case IMProtocol::DIGSBY:
            return "digsby";
        case IMProtocol::FACEBOOK:
            return "facebook";
        case IMProtocol::JABBER:
            return "jabber";
        case IMProtocol::MSN:
            return "msn";
        case IMProtocol::SKYPE:
            return "skype";
        case IMProtocol::WHATSAPP:
            return "whatsapp";
        case IMProtocol::YAHOO:
            return "yahoo";
    }

    invariant_violation("Invalid IMProtocol value (%lld)", (int64_t)protocol);
}

IMProtocol im_protocol_from_symbol(IMM(QString) symbol) {
    const static QMap<QString, IMProtocol> MAP = {
        { "invalid",  IMProtocol::INVALID },
        { "digsby",   IMProtocol::DIGSBY },
        { "facebook", IMProtocol::FACEBOOK },
        { "jabber",   IMProtocol::JABBER },
        { "msn",      IMProtocol::MSN },
        { "skype",    IMProtocol::SKYPE },
        { "whatsapp", IMProtocol::WHATSAPP },
        { "yahoo",    IMProtocol::YAHOO },
    };

    if (MAP.contains(symbol)) {
        return MAP[symbol];
    }

    invariant_violation("Invalid IMProtocol symbol ('%s')", QP(symbol));
}

QDebug operator<< (QDebug stream, IMProtocol protocol) {
    stream << QP(name_for_im_protocol(protocol));

    return stream;
}

QDataStream& operator>> (QDataStream& mut_stream, IMProtocol& mut_protocol) {
    uint8_t code = must_deserialize(mut_stream, uint8_t);

    switch ((IMProtocol)code) {
        case IMProtocol::INVALID:
        case IMProtocol::DIGSBY:
        case IMProtocol::FACEBOOK:
        case IMProtocol::JABBER:
        case IMProtocol::MSN:
        case IMProtocol::SKYPE:
        case IMProtocol::WHATSAPP:
        case IMProtocol::YAHOO:
            mut_protocol = (IMProtocol)code;
            break;
        default:
            invariant_violation("Invalid deserialized IMProtocol value (%lld)", (int64_t)code);
    }

    return mut_stream;
}

QDataStream& operator<< (QDataStream& mut_stream, IMProtocol protocol) {
    mut_stream << (uint8_t)protocol;

    return mut_stream;
}

}}
